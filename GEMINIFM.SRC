	[number match level address z80 print disk full map]
BEGIN
	{---------------------------------}
	{-- PLACE OUR PROGRAM AT ^h8000 --}
	{---------------------------------}
	STRING RESERVE_SPACE LENGTH ^h7EF9;
	
	{-----------------------------------}
	{-- CONSTANTS AND WORKING STORAGE --}
	{-----------------------------------}
	SET DOS_CALLF = ^h30;
	SET DOS_RDSLT = ^h09;
	SET DOS_WRSLT = ^h11;
	SET DOS_ENASLT = ^h21;
	
	SET BIOS_ENASLT = ^h24;
	SET BIOS_BEEP = ^hC0;
	SET BIOS_GTTRIG = ^hD8
	
	SET CALL_OPCODE = ^hCD;
	SET RET_OPCODE =  ^hC9;
	
	SET DOS2_BIOS = ^h0005;
	
	EXTERNAL BYTE EXPTBL0 ADDRESS ^hFCC1;
	EXTERNAL BYTE EXPTBL1 ADDRESS ^hFCC2;
	EXTERNAL BYTE EXPTBL2 ADDRESS ^hFCC3;
	EXTERNAL BYTE EXPTBL3 ADDRESS ^hFCC4;
	
	SET HIGH = ^hFF;
	SET LOW = ^h00;
	
	SET DETECT_APRLOPLL_ADDR = ^h4018;
	SET DETECT_MCHFM0_ADDR = ^h0080;
	
	SET NEWKEY = ^hFBE5;
	EXTERNAL BYTE NEWKEY7 ADDRESS (NEWKEY + 7);
	
	EXTERNAL BYTE RAMAD0 ADDRESS ^hF341;
	EXTERNAL BYTE RAMAD1 ADDRESS ^hF342;
	EXTERNAL BYTE RAMAD2 ADDRESS ^hF343;
	EXTERNAL BYTE RAMAD3 ADDRESS ^hF344;
	EXTERNAL BYTE BIOS_SLOT_ID ADDRESS ^hFCC1;
	
	BYTE WHILE_LOOP_COUNTER VALUE 0;
	BYTE WHILE_LOOP_LIMIT VALUE 0;
	BYTE DETECT_SLOT VALUE 0;
	BYTE RETURN_SLOT VALUE 0;
	
	STRING FOUND_STRING LENGTH 9;
	STRING GOAL_STRING LENGTH 9;
	POINTER TO BYTE INTERNAL_DETECT_POINTER VALUE #FOUND_STRING;
	WORD DETECT_ADDR;
	WORD EXTERNAL_DETECT_POINTER;
	BYTE DETECT_STRING_LENGTH;
	BYTE DETECT_CHAR_IN;

	WORD DUMMY_WORD;
	
	WORD GEMINI_COMMAND;
	REDEFINE GEMINI_COMMAND;
		RECORD GEMINI_COMMAND_REC;
			BYTE GEMINI_COMMAND_BYTECODE;
			BYTE GEMINI_COMMAND_DATA;
		ENDREC;
	ENDREDEF;
	POINTER TO WORD GEMINI_COMMAND_POINTER VALUE HIMEM;
	WORD GEMINI_INFINITE_LOOP_POINT;
	BYTE TEMPO VALUE 0;
	BYTE TEMPO_COUNTER VALUE 0;
	BYTE WAIT_COUNT;
	BYTE GEMINI_NOT_PAUSED VALUE 0;
	
	FIELD LOOP_STACK LENGTH 32;
	POINTER TO WORD LOOP_STACK_POINTER VALUE #LOOP_STACK;
	
	BYTE OPM_NOT_FOUND;
	
	{---------------------------------------
	{-- DOS-SPECIFIC WORK AREA            --
	{-- REMOVE THESE IN EMBEDDED REPLAYER --
	{---------------------------------------
	
	BYTE SONG_DONE;
	BYTE SPACE_PRESSED;
	BYTE PAUSE_DEBOUNCE;
	BYTE LASTCHAR;
	BYTE INCHAR;
	STRING INBUFFER 512;
	FILE INFILE DISK FILE1 TEXT RECORD INCHAR BUFFER INBUFFER VALUE "SONG.BIN";
	EXTERNAL WORD TPA_END ADDRESS ^h0006;
	POINTER TO BYTE SONG_LOAD_POINTER VALUE HIMEM;
	WORD USER_AREA_END;
	
	EXTERNAL FIELD HTIMI_HOOK ADDRESS ^hFD9F LENGTH 5;
	FIELD OLD_HTIMI_HOOK 5;
	BYTE OLD_HTIMI_RET VALUE RET_OPCODE;
	FIELD NEW_HTIMI_HOOK 5;
	REDEFINE NEW_HTIMI_HOOK;
		RECORD NEW_HTIMI_HOOK_REC;
			BYTE NEW_HTIMI_COMMAND_CALL VALUE CALL_OPCODE;
			WORD NEW_HTIMI_COMMAND_ADDRESS VALUE VBLANK;
			BYTE NEW_HTIMI_COMMAND_RET VALUE RET_OPCODE;
			BYTE FILLER VALUE ^h00;
		ENDREC;
	ENDREDEF;
	
	STRING STR_OUT LENGTH 15;
	
	WORD WHEEL_POSITION;
	
	{------------------
	{-- OPLL DEFINES --
	{------------------
	SET OPLL_FNUM_C = 87;
	SET OPLL_FNUM_CSHARP = 91;
	SET OPLL_FNUM_D = 97; 
	SET OPLL_FNUM_DSHARP = 103; 
	SET OPLL_FNUM_E = 109;
	SET OPLL_FNUM_F = 115; 
	SET OPLL_FNUM_FSHARP = 122; 
	SET OPLL_FNUM_G = 129; 
	SET OPLL_FNUM_GSHARP = 137; 
	SET OPLL_FNUM_A = 145;
	SET OPLL_FNUM_ASHARP = 154; 
	SET OPLL_FNUM_B = 163; 
	
	SET OPLL_REG_PORT = ^h7C;
	SET OPLL_DATA_PORT = ^h7D;
	
	SET WRTOPL = ^h4110;
	
	SET OPLL_RHYTHM_BASE = ^h0E;
	SET OPLL_FNUM_BASE = ^h10;
	SET OPLL_CNTL_BASE = ^h20;
	SET OPLL_INSTVOL_BASE = ^h30;
	
	BYTE OPLL_REG_OUT;
	BYTE OPLL_DATA_OUT;

	BYTE OPLL_NOTE;
	BYTE OPLL_OCTAVE;
	
	POINTER TO BYTE OPLL_FNUM;
	POINTER TO BYTE OPLL_CNTL;
	POINTER TO BYTE OPLL_INSTVOL;
	POINTER TO BYTE OPLL_DETUNE;
	
	BYTE OPLL0_FNUM;
	BYTE OPLL0_CNTL;
	BYTE OPLL0_INSTVOL;
	BYTE OPLL0_DETUNE;
	
	BYTE OPLL1_FNUM;
	BYTE OPLL1_CNTL;
	BYTE OPLL1_INSTVOL;
	BYTE OPLL1_DETUNE;
	
	BYTE OPLL2_FNUM;
	BYTE OPLL2_CNTL;
	BYTE OPLL2_INSTVOL;
	BYTE OPLL2_DETUNE;
	
	BYTE OPLL3_FNUM;
	BYTE OPLL3_CNTL;
	BYTE OPLL3_INSTVOL;
	BYTE OPLL3_DETUNE;
	
	BYTE OPLL4_FNUM;
	BYTE OPLL4_CNTL;
	BYTE OPLL4_INSTVOL;
	BYTE OPLL4_DETUNE;
	
	BYTE OPLL5_FNUM;
	BYTE OPLL5_CNTL;
	BYTE OPLL5_INSTVOL;
	BYTE OPLL5_DETUNE;
	
	BYTE OPLL_RHYTHM;
	BYTE OPLL_BD_VOL;
	BYTE OPLL_SD_VOL;
	BYTE OPLL_HH_VOL;
	BYTE OPLL_TM_VOL;
	BYTE OPLL_CY_VOL;
	
	{------------------
	{-- OPM DEFINES  --
	{------------------
	
	EXTERNAL BYTE OPM_STATUS_ADDR ADDRESS ^h7FF1;
	EXTERNAL BYTE OPM_REG_ADDR ADDRESS ^h7FF0;
	EXTERNAL BYTE OPM_DATA_ADDR ADDRESS ^h7FF1;
	
	SET OPM_NOTE_C = ^h0E;
	SET OPM_NOTE_CSHARP = ^h00;
	SET OPM_NOTE_D = ^h01;
	SET OPM_NOTE_DSHARP = ^h02;
	SET OPM_NOTE_E = ^h04;
	SET OPM_NOTE_F = ^h05;
	SET OPM_NOTE_FSHARP = ^h06;
	SET OPM_NOTE_G = ^h08;
	SET OPM_NOTE_GSHARP = ^h09;
	SET OPM_NOTE_A = ^h0A;
	SET OPM_NOTE_ASHARP = ^h0C;
	SET OPM_NOTE_B = ^h0D;
	
	SET OPM_CNTL_REG = ^h08;
	SET OPM_OCTNOTE_BASE = ^h18;
	SET OPM_ALG_BASE = ^h20;
	SET OPM_DETUNE_BASE = ^h30;
	SET OPM_OP1VOL_BASE = ^h60;
	SET OPM_OP3VOL_BASE = ^h70;
	SET OPM_OP2VOL_BASE = ^h68;
	SET OPM_OP4VOL_BASE = ^h78;
	
	BYTE OPM0_VOL;
	BYTE OPM1_VOL;
	BYTE OPM2_VOL;
	BYTE OPM3_VOL;
	BYTE OPM4_VOL;
	BYTE OPM5_VOL;
	
	BYTE OPM_BD_VOL;
	BYTE OPM_SD_VOL;
	BYTE OPM_HH_VOL;
	BYTE OPM_TM_VOL;
	BYTE OPM_CY_VOL;
	
	POINTER TO BYTE OPM_INST_POINTER;
	
	
	{--WARNING- THESE ARE STORED IN MGSDRV INST ORDER, *NOT* OPLL INST REGISTER ORDER
	{--THAT MEANS THE USER VOICE IS INSTRUMENT *F* DESPITE BEING INSTRUMENT 0 IN GEMINI FM
	{--IF I DON'T FIX TIS BEFORE V1.0 GET MAD AT ME
	
	{--INSTRUMENT 0;
	BYTE OPM_I0_20 VALUE ^hFC;
	BYTE OPM_I0_40 VALUE ^h01;
	BYTE OPM_I0_48 VALUE ^h01;
	BYTE OPM_I0_50 VALUE ^h01;
	BYTE OPM_I0_58 VALUE ^h01;
	BYTE OPM_I0_60 VALUE ^h1E;
	BYTE OPM_I0_68 VALUE ^h7F;
	BYTE OPM_I0_70 VALUE ^h19;
	BYTE OPM_I0_78 VALUE ^h7F;
	BYTE OPM_I0_80 VALUE ^h1F;
	BYTE OPM_I0_88 VALUE ^h1F;
	BYTE OPM_I0_90 VALUE ^h0F;
	BYTE OPM_I0_98 VALUE ^h0F;
	BYTE OPM_I0_A0 VALUE ^h1F;
	BYTE OPM_I0_A8 VALUE ^h1F;
	BYTE OPM_I0_B0 VALUE ^h1F;
	BYTE OPM_I0_B8 VALUE ^h1F;
	BYTE OPM_I0_C0 VALUE ^h00;
	BYTE OPM_I0_C8 VALUE ^h00;
	BYTE OPM_I0_D0 VALUE ^h00;
	BYTE OPM_I0_D8 VALUE ^h00;
	BYTE OPM_I0_E0 VALUE ^h06;
	BYTE OPM_I0_E8 VALUE ^h06;
	BYTE OPM_I0_F0 VALUE ^h09;
	BYTE OPM_I0_F8 VALUE ^h09;

	{--INSTRUMENT 1;
	BYTE OPM_I1_20 VALUE ^hFC;
	BYTE OPM_I1_40 VALUE ^h33;
	BYTE OPM_I1_48 VALUE ^h00;
	BYTE OPM_I1_50 VALUE ^h21;
	BYTE OPM_I1_58 VALUE ^h01;
	BYTE OPM_I1_60 VALUE ^h24;
	BYTE OPM_I1_68 VALUE ^h7F;
	BYTE OPM_I1_70 VALUE ^h16;
	BYTE OPM_I1_78 VALUE ^h7F;
	BYTE OPM_I1_80 VALUE ^h5B;
	BYTE OPM_I1_88 VALUE ^h1F;
	BYTE OPM_I1_90 VALUE ^h1B;
	BYTE OPM_I1_98 VALUE ^h9F;
	BYTE OPM_I1_A0 VALUE ^h09;
	BYTE OPM_I1_A8 VALUE ^h1F;
	BYTE OPM_I1_B0 VALUE ^h00;
	BYTE OPM_I1_B8 VALUE ^h00;
	BYTE OPM_I1_C0 VALUE ^h0B;
	BYTE OPM_I1_C8 VALUE ^h1F;
	BYTE OPM_I1_D0 VALUE ^h0B;
	BYTE OPM_I1_D8 VALUE ^h00;
	BYTE OPM_I1_E0 VALUE ^h26;
	BYTE OPM_I1_E8 VALUE ^h0F;
	BYTE OPM_I1_F0 VALUE ^h0A;
	BYTE OPM_I1_F8 VALUE ^h06;

	{--INSTRUMENT 2;
	BYTE OPM_I2_20 VALUE ^hEC;
	BYTE OPM_I2_40 VALUE ^h03;
	BYTE OPM_I2_48 VALUE ^h00;
	BYTE OPM_I2_50 VALUE ^h01;
	BYTE OPM_I2_58 VALUE ^h00;
	BYTE OPM_I2_60 VALUE ^h22;
	BYTE OPM_I2_68 VALUE ^h7F;
	BYTE OPM_I2_70 VALUE ^h18;
	BYTE OPM_I2_78 VALUE ^h7F;
	BYTE OPM_I2_80 VALUE ^h5F;
	BYTE OPM_I2_88 VALUE ^h1F;
	BYTE OPM_I2_90 VALUE ^h1B;
	BYTE OPM_I2_98 VALUE ^h1F;
	BYTE OPM_I2_A0 VALUE ^h04;
	BYTE OPM_I2_A8 VALUE ^h1F;
	BYTE OPM_I2_B0 VALUE ^h04;
	BYTE OPM_I2_B8 VALUE ^h1F;
	BYTE OPM_I2_C0 VALUE ^h03;
	BYTE OPM_I2_C8 VALUE ^h1F;
	BYTE OPM_I2_D0 VALUE ^h0A;
	BYTE OPM_I2_D8 VALUE ^h1F;
	BYTE OPM_I2_E0 VALUE ^h06;
	BYTE OPM_I2_E8 VALUE ^h0F;
	BYTE OPM_I2_F0 VALUE ^h0A;
	BYTE OPM_I2_F8 VALUE ^h0F;


	{--INSTRUMENT 3;
	BYTE OPM_I3_20 VALUE ^hFD;
	BYTE OPM_I3_40 VALUE ^h01;
	BYTE OPM_I3_48 VALUE ^h00;
	BYTE OPM_I3_50 VALUE ^h01;
	BYTE OPM_I3_58 VALUE ^h01;
	BYTE OPM_I3_60 VALUE ^h2A;
	BYTE OPM_I3_68 VALUE ^h7F;
	BYTE OPM_I3_70 VALUE ^h14;
	BYTE OPM_I3_78 VALUE ^h1A;
	BYTE OPM_I3_80 VALUE ^h1F;
	BYTE OPM_I3_88 VALUE ^h1F;
	BYTE OPM_I3_90 VALUE ^h0E;
	BYTE OPM_I3_98 VALUE ^h0E;
	BYTE OPM_I3_A0 VALUE ^h01;
	BYTE OPM_I3_A8 VALUE ^h1F;
	BYTE OPM_I3_B0 VALUE ^h1F;
	BYTE OPM_I3_B8 VALUE ^h0F;
	BYTE OPM_I3_C0 VALUE ^h00;
	BYTE OPM_I3_C8 VALUE ^h1F;
	BYTE OPM_I3_D0 VALUE ^h00;
	BYTE OPM_I3_D8 VALUE ^h1F;
	BYTE OPM_I3_E0 VALUE ^h16;
	BYTE OPM_I3_E8 VALUE ^h0F;
	BYTE OPM_I3_F0 VALUE ^h0A;
	BYTE OPM_I3_F8 VALUE ^hFF;


	{--INSTRUMENT 4;
	BYTE OPM_I4_20 VALUE ^hF4;
	BYTE OPM_I4_40 VALUE ^h02;
	BYTE OPM_I4_48 VALUE ^h00;
	BYTE OPM_I4_50 VALUE ^h01;
	BYTE OPM_I4_58 VALUE ^h00;
	BYTE OPM_I4_60 VALUE ^h1F;
	BYTE OPM_I4_68 VALUE ^h7F;
	BYTE OPM_I4_70 VALUE ^h17;
	BYTE OPM_I4_78 VALUE ^h7F;
	BYTE OPM_I4_80 VALUE ^h1F;
	BYTE OPM_I4_88 VALUE ^h1F;
	BYTE OPM_I4_90 VALUE ^h11;
	BYTE OPM_I4_98 VALUE ^h1F;
	BYTE OPM_I4_A0 VALUE ^h19;
	BYTE OPM_I4_A8 VALUE ^h1F;
	BYTE OPM_I4_B0 VALUE ^h1F;
	BYTE OPM_I4_B8 VALUE ^h1F;
	BYTE OPM_I4_C0 VALUE ^h00;
	BYTE OPM_I4_C8 VALUE ^h1F;
	BYTE OPM_I4_D0 VALUE ^h00;
	BYTE OPM_I4_D8 VALUE ^h1F;
	BYTE OPM_I4_E0 VALUE ^h16;
	BYTE OPM_I4_E8 VALUE ^h0F;
	BYTE OPM_I4_F0 VALUE ^h0A;
	BYTE OPM_I4_F8 VALUE ^h0F;

	{--INSTRUMENT 5;
	BYTE OPM_I5_20 VALUE ^hEC;
	BYTE OPM_I5_40 VALUE ^h01;
	BYTE OPM_I5_48 VALUE ^h00;
	BYTE OPM_I5_50 VALUE ^h04;
	BYTE OPM_I5_58 VALUE ^h00;
	BYTE OPM_I5_60 VALUE ^h19;
	BYTE OPM_I5_68 VALUE ^h7F;
	BYTE OPM_I5_70 VALUE ^h14;
	BYTE OPM_I5_78 VALUE ^h7F;
	BYTE OPM_I5_80 VALUE ^hDF;
	BYTE OPM_I5_88 VALUE ^h1F;
	BYTE OPM_I5_90 VALUE ^h11;
	BYTE OPM_I5_98 VALUE ^h1F;
	BYTE OPM_I5_A0 VALUE ^h1F;
	BYTE OPM_I5_A8 VALUE ^h1F;
	BYTE OPM_I5_B0 VALUE ^h1F;
	BYTE OPM_I5_B8 VALUE ^h1F;
	BYTE OPM_I5_C0 VALUE ^h00;
	BYTE OPM_I5_C8 VALUE ^h1F;
	BYTE OPM_I5_D0 VALUE ^h00;
	BYTE OPM_I5_D8 VALUE ^h1F;
	BYTE OPM_I5_E0 VALUE ^h06;
	BYTE OPM_I5_E8 VALUE ^h0F;
	BYTE OPM_I5_F0 VALUE ^h0A;
	BYTE OPM_I5_F8 VALUE ^h0F;


	{--INSTRUMENT 6;
	BYTE OPM_I6_20 VALUE ^hFC;
	BYTE OPM_I6_40 VALUE ^h01;
	BYTE OPM_I6_48 VALUE ^h00;
	BYTE OPM_I6_50 VALUE ^h01;
	BYTE OPM_I6_58 VALUE ^h00;
	BYTE OPM_I6_60 VALUE ^h1D; {--^h1E;
	BYTE OPM_I6_68 VALUE ^h7F;
	BYTE OPM_I6_70 VALUE ^h14;
	BYTE OPM_I6_78 VALUE ^h7F;
	BYTE OPM_I6_80 VALUE ^h12;
	BYTE OPM_I6_88 VALUE ^h1F;
	BYTE OPM_I6_90 VALUE ^h16;
	BYTE OPM_I6_98 VALUE ^h1F;
	BYTE OPM_I6_A0 VALUE ^h06;
	BYTE OPM_I6_A8 VALUE ^h1F;
	BYTE OPM_I6_B0 VALUE ^h0A; {--01
	BYTE OPM_I6_B8 VALUE ^h1F;
	BYTE OPM_I6_C0 VALUE ^h00; 
	BYTE OPM_I6_C8 VALUE ^h1F;
	BYTE OPM_I6_D0 VALUE ^h00; 
	BYTE OPM_I6_D8 VALUE ^h1F;
	BYTE OPM_I6_E0 VALUE ^h1F; {--16
	BYTE OPM_I6_E8 VALUE ^h0F;
	BYTE OPM_I6_F0 VALUE ^h1F; {--1A
	BYTE OPM_I6_F8 VALUE ^h0F;


	{--INSTRUMENT 7;
	BYTE OPM_I7_20 VALUE ^hFC;
	BYTE OPM_I7_40 VALUE ^h73;
	BYTE OPM_I7_48 VALUE ^h33;
	BYTE OPM_I7_50 VALUE ^h31;
	BYTE OPM_I7_58 VALUE ^h71;
	BYTE OPM_I7_60 VALUE ^h3C;
	BYTE OPM_I7_68 VALUE ^h23;
	BYTE OPM_I7_70 VALUE ^h1E;
	BYTE OPM_I7_78 VALUE ^h1E;
	BYTE OPM_I7_80 VALUE ^h1F;
	BYTE OPM_I7_88 VALUE ^h1F;
	BYTE OPM_I7_90 VALUE ^h0F;
	BYTE OPM_I7_98 VALUE ^h0F;
	BYTE OPM_I7_A0 VALUE ^h1F;
	BYTE OPM_I7_A8 VALUE ^h1F;
	BYTE OPM_I7_B0 VALUE ^h1F;
	BYTE OPM_I7_B8 VALUE ^h1F;
	BYTE OPM_I7_C0 VALUE ^h00;
	BYTE OPM_I7_C8 VALUE ^h00;
	BYTE OPM_I7_D0 VALUE ^h00;
	BYTE OPM_I7_D8 VALUE ^h00;
	BYTE OPM_I7_E0 VALUE ^h06;
	BYTE OPM_I7_E8 VALUE ^h06;
	BYTE OPM_I7_F0 VALUE ^h0A;
	BYTE OPM_I7_F8 VALUE ^h0A;


	{--INSTRUMENT 8;
	BYTE OPM_I8_20 VALUE ^hF4;
	BYTE OPM_I8_40 VALUE ^h01;
	BYTE OPM_I8_48 VALUE ^h00;
	BYTE OPM_I8_50 VALUE ^h01;
	BYTE OPM_I8_58 VALUE ^h00;
	BYTE OPM_I8_60 VALUE ^h20;
	BYTE OPM_I8_68 VALUE ^h7F;
	BYTE OPM_I8_70 VALUE ^h12;
	BYTE OPM_I8_78 VALUE ^h7F;
	BYTE OPM_I8_80 VALUE ^h10;
	BYTE OPM_I8_88 VALUE ^h1F;
	BYTE OPM_I8_90 VALUE ^h12;
	BYTE OPM_I8_98 VALUE ^h1F;
	BYTE OPM_I8_A0 VALUE ^h00;
	BYTE OPM_I8_A8 VALUE ^h1F;
	BYTE OPM_I8_B0 VALUE ^h1F;
	BYTE OPM_I8_B8 VALUE ^h1F;
	BYTE OPM_I8_C0 VALUE ^h00;
	BYTE OPM_I8_C8 VALUE ^h1F;
	BYTE OPM_I8_D0 VALUE ^h00;
	BYTE OPM_I8_D8 VALUE ^h1F;
	BYTE OPM_I8_E0 VALUE ^h16;
	BYTE OPM_I8_E8 VALUE ^h0F;
	BYTE OPM_I8_F0 VALUE ^h0A;
	BYTE OPM_I8_F8 VALUE ^h0F;



	{--INSTRUMENT 9;
	BYTE OPM_I9_20 VALUE ^hE8;
	BYTE OPM_I9_40 VALUE ^h01;
	BYTE OPM_I9_48 VALUE ^h01;
	BYTE OPM_I9_50 VALUE ^h01;
	BYTE OPM_I9_58 VALUE ^h01;
	BYTE OPM_I9_60 VALUE ^h14;
	BYTE OPM_I9_68 VALUE ^h21;
	BYTE OPM_I9_70 VALUE ^h1C;
	BYTE OPM_I9_78 VALUE ^h1B;
	BYTE OPM_I9_80 VALUE ^h12;
	BYTE OPM_I9_88 VALUE ^h12;
	BYTE OPM_I9_90 VALUE ^h12;
	BYTE OPM_I9_98 VALUE ^h16;
	BYTE OPM_I9_A0 VALUE ^h0C;
	BYTE OPM_I9_A8 VALUE ^h0C;
	BYTE OPM_I9_B0 VALUE ^h0C;
	BYTE OPM_I9_B8 VALUE ^h1F;
	BYTE OPM_I9_C0 VALUE ^h00;
	BYTE OPM_I9_C8 VALUE ^h00;
	BYTE OPM_I9_D0 VALUE ^h00;
	BYTE OPM_I9_D8 VALUE ^h00;
	BYTE OPM_I9_E0 VALUE ^h36;
	BYTE OPM_I9_E8 VALUE ^h36;
	BYTE OPM_I9_F0 VALUE ^h36;
	BYTE OPM_I9_F8 VALUE ^h0A;

	{--INSTRUMENT 10;
	BYTE OPM_IA_20 VALUE ^hD4;
	BYTE OPM_IA_40 VALUE ^h03;
	BYTE OPM_IA_48 VALUE ^h06;
	BYTE OPM_IA_50 VALUE ^h01;
	BYTE OPM_IA_58 VALUE ^h02;
	BYTE OPM_IA_60 VALUE ^h10;
	BYTE OPM_IA_68 VALUE ^h1B;
	BYTE OPM_IA_70 VALUE ^h17;
	BYTE OPM_IA_78 VALUE ^h1B;
	BYTE OPM_IA_80 VALUE ^h1F;
	BYTE OPM_IA_88 VALUE ^h1F;
	BYTE OPM_IA_90 VALUE ^h1A;
	BYTE OPM_IA_98 VALUE ^h1F;
	BYTE OPM_IA_A0 VALUE ^h1F;
	BYTE OPM_IA_A8 VALUE ^h1F;
	BYTE OPM_IA_B0 VALUE ^h00;
	BYTE OPM_IA_B8 VALUE ^h00;
	BYTE OPM_IA_C0 VALUE ^h00;
	BYTE OPM_IA_C8 VALUE ^h00;
	BYTE OPM_IA_D0 VALUE ^h0C;
	BYTE OPM_IA_D8 VALUE ^h0C;
	BYTE OPM_IA_E0 VALUE ^h06;
	BYTE OPM_IA_E8 VALUE ^h06;
	BYTE OPM_IA_F0 VALUE ^h0A;
	BYTE OPM_IA_F8 VALUE ^h0A;


	{--INSTRUMENT 11;
	BYTE OPM_IB_20 VALUE ^hFC;
	BYTE OPM_IB_40 VALUE ^h07;
	BYTE OPM_IB_48 VALUE ^h00;
	BYTE OPM_IB_50 VALUE ^h01;
	BYTE OPM_IB_58 VALUE ^h00;
	BYTE OPM_IB_60 VALUE ^h30;
	BYTE OPM_IB_68 VALUE ^h7F;
	BYTE OPM_IB_70 VALUE ^h14;
	BYTE OPM_IB_78 VALUE ^h7F;
	BYTE OPM_IB_80 VALUE ^h1F;
	BYTE OPM_IB_88 VALUE ^h1F;
	BYTE OPM_IB_90 VALUE ^h1F;
	BYTE OPM_IB_98 VALUE ^h1F;
	BYTE OPM_IB_A0 VALUE ^h1F;
	BYTE OPM_IB_A8 VALUE ^h1F;
	BYTE OPM_IB_B0 VALUE ^h1F;
	BYTE OPM_IB_B8 VALUE ^h1F;
	BYTE OPM_IB_C0 VALUE ^h0A;
	BYTE OPM_IB_C8 VALUE ^h1F;
	BYTE OPM_IB_D0 VALUE ^h09;
	BYTE OPM_IB_D8 VALUE ^h1F;
	BYTE OPM_IB_E0 VALUE ^h06;
	BYTE OPM_IB_E8 VALUE ^h0F;
	BYTE OPM_IB_F0 VALUE ^h0A;
	BYTE OPM_IB_F8 VALUE ^h0F;


	{--INSTRUMENT 12;
	BYTE OPM_IC_20 VALUE ^hF4;
	BYTE OPM_IC_40 VALUE ^h01;
	BYTE OPM_IC_48 VALUE ^h00;
	BYTE OPM_IC_50 VALUE ^h00;
	BYTE OPM_IC_58 VALUE ^h00;
	BYTE OPM_IC_60 VALUE ^h0D;
	BYTE OPM_IC_68 VALUE ^h7F;
	BYTE OPM_IC_70 VALUE ^h19;
	BYTE OPM_IC_78 VALUE ^h7F;
	BYTE OPM_IC_80 VALUE ^h1F;
	BYTE OPM_IC_88 VALUE ^h1F;
	BYTE OPM_IC_90 VALUE ^h5B;
	BYTE OPM_IC_98 VALUE ^h1F;
	BYTE OPM_IC_A0 VALUE ^h1F;
	BYTE OPM_IC_A8 VALUE ^h1F;
	BYTE OPM_IC_B0 VALUE ^h1F;
	BYTE OPM_IC_B8 VALUE ^h1F;
	BYTE OPM_IC_C0 VALUE ^h0B;
	BYTE OPM_IC_C8 VALUE ^h1F;
	BYTE OPM_IC_D0 VALUE ^h0B;
	BYTE OPM_IC_D8 VALUE ^h1F;
	BYTE OPM_IC_E0 VALUE ^h06;
	BYTE OPM_IC_E8 VALUE ^h0F;
	BYTE OPM_IC_F0 VALUE ^h0A;
	BYTE OPM_IC_F8 VALUE ^h0F;



	{--INSTRUMENT 13;
	BYTE OPM_ID_20 VALUE ^hE4;
	BYTE OPM_ID_40 VALUE ^h01;
	BYTE OPM_ID_48 VALUE ^h00;
	BYTE OPM_ID_50 VALUE ^h01;
	BYTE OPM_ID_58 VALUE ^h00;
	BYTE OPM_ID_60 VALUE ^h18;
	BYTE OPM_ID_68 VALUE ^h7F;
	BYTE OPM_ID_70 VALUE ^h14;
	BYTE OPM_ID_78 VALUE ^h7F;
	BYTE OPM_ID_80 VALUE ^h1F;
	BYTE OPM_ID_88 VALUE ^h1F;
	BYTE OPM_ID_90 VALUE ^h19;
	BYTE OPM_ID_98 VALUE ^h1F;
	BYTE OPM_ID_A0 VALUE ^h1F;
	BYTE OPM_ID_A8 VALUE ^h1F;
	BYTE OPM_ID_B0 VALUE ^h1F;
	BYTE OPM_ID_B8 VALUE ^h1F;
	BYTE OPM_ID_C0 VALUE ^h09;
	BYTE OPM_ID_C8 VALUE ^h1F;
	BYTE OPM_ID_D0 VALUE ^h05;
	BYTE OPM_ID_D8 VALUE ^h1F;
	BYTE OPM_ID_E0 VALUE ^h06;
	BYTE OPM_ID_E8 VALUE ^h0F;
	BYTE OPM_ID_F0 VALUE ^h0A;
	BYTE OPM_ID_F8 VALUE ^h0F;


	{--INSTRUMENT 14;
	BYTE OPM_IE_20 VALUE ^hE4;
	BYTE OPM_IE_40 VALUE ^h01;
	BYTE OPM_IE_48 VALUE ^h00;
	BYTE OPM_IE_50 VALUE ^h01;
	BYTE OPM_IE_58 VALUE ^h00;
	BYTE OPM_IE_60 VALUE ^h13;
	BYTE OPM_IE_68 VALUE ^h7F;
	BYTE OPM_IE_70 VALUE ^h14;
	BYTE OPM_IE_78 VALUE ^h7F;
	BYTE OPM_IE_80 VALUE ^h1F;
	BYTE OPM_IE_88 VALUE ^h1F;
	BYTE OPM_IE_90 VALUE ^h1B;
	BYTE OPM_IE_98 VALUE ^h1F;
	BYTE OPM_IE_A0 VALUE ^h1F;
	BYTE OPM_IE_A8 VALUE ^h1F;
	BYTE OPM_IE_B0 VALUE ^h1F;
	BYTE OPM_IE_B8 VALUE ^h1F;
	BYTE OPM_IE_C0 VALUE ^h07;
	BYTE OPM_IE_C8 VALUE ^h1F;
	BYTE OPM_IE_D0 VALUE ^h0A;
	BYTE OPM_IE_D8 VALUE ^h1F;
	BYTE OPM_IE_E0 VALUE ^h06;
	BYTE OPM_IE_E8 VALUE ^h0F;
	BYTE OPM_IE_F0 VALUE ^h0A;
	BYTE OPM_IE_F8 VALUE ^h0F;

	{--INSTRUMENT 15;
	BYTE OPM_IF_20 VALUE ^hE4;
	BYTE OPM_IF_40 VALUE ^h07;
	BYTE OPM_IF_48 VALUE ^h00;
	BYTE OPM_IF_50 VALUE ^h02;
	BYTE OPM_IF_58 VALUE ^h00;
	BYTE OPM_IF_60 VALUE ^h1E;
	BYTE OPM_IF_68 VALUE ^h7F;
	BYTE OPM_IF_70 VALUE ^h14;
	BYTE OPM_IF_78 VALUE ^h7F;
	BYTE OPM_IF_80 VALUE ^h1F;
	BYTE OPM_IF_88 VALUE ^h1F;
	BYTE OPM_IF_90 VALUE ^h9F;
	BYTE OPM_IF_98 VALUE ^h1F;
	BYTE OPM_IF_A0 VALUE ^h1F;
	BYTE OPM_IF_A8 VALUE ^h1F;
	BYTE OPM_IF_B0 VALUE ^h1F;
	BYTE OPM_IF_B8 VALUE ^h1F;
	BYTE OPM_IF_C0 VALUE ^h08;
	BYTE OPM_IF_C8 VALUE ^h1F;
	BYTE OPM_IF_D0 VALUE ^h09;
	BYTE OPM_IF_D8 VALUE ^h1F;
	BYTE OPM_IF_E0 VALUE ^h0F;
	BYTE OPM_IF_E8 VALUE ^h0F;
	BYTE OPM_IF_F0 VALUE ^h0F;
	BYTE OPM_IF_F8 VALUE ^h0F;
	
	BYTE OPM_A0_20 VALUE ^hFA;
	BYTE OPM_A0_40 VALUE ^h32;
	BYTE OPM_A0_48 VALUE ^h71;
	BYTE OPM_A0_50 VALUE ^h7A;
	BYTE OPM_A0_58 VALUE ^h31;
	BYTE OPM_A0_60 VALUE ^h20;
	BYTE OPM_A0_68 VALUE ^h1E;
	BYTE OPM_A0_70 VALUE ^h24;
	BYTE OPM_A0_78 VALUE ^h14;
	BYTE OPM_A0_80 VALUE ^h57;
	BYTE OPM_A0_88 VALUE ^h10;
	BYTE OPM_A0_90 VALUE ^h55;
	BYTE OPM_A0_98 VALUE ^h0B;
	BYTE OPM_A0_A0 VALUE ^h04;
	BYTE OPM_A0_A8 VALUE ^h05;
	BYTE OPM_A0_B0 VALUE ^h08;
	BYTE OPM_A0_B8 VALUE ^h05;
	BYTE OPM_A0_C0 VALUE ^h02;
	BYTE OPM_A0_C8 VALUE ^h02;
	BYTE OPM_A0_D0 VALUE ^h00;
	BYTE OPM_A0_D8 VALUE ^h00;
	BYTE OPM_A0_E0 VALUE ^h26;
	BYTE OPM_A0_E8 VALUE ^h26;
	BYTE OPM_A0_F0 VALUE ^hC6;
	BYTE OPM_A0_F8 VALUE ^h0A;

	BYTE OPM_A1_20 VALUE ^hC0;
	BYTE OPM_A1_40 VALUE ^h1E;
	BYTE OPM_A1_48 VALUE ^h13;
	BYTE OPM_A1_50 VALUE ^h03;
	BYTE OPM_A1_58 VALUE ^h11;
	BYTE OPM_A1_60 VALUE ^h2C;
	BYTE OPM_A1_68 VALUE ^h21;
	BYTE OPM_A1_70 VALUE ^h1F;
	BYTE OPM_A1_78 VALUE ^h14;
	BYTE OPM_A1_80 VALUE ^h1F;
	BYTE OPM_A1_88 VALUE ^h1C;
	BYTE OPM_A1_90 VALUE ^h1F;
	BYTE OPM_A1_98 VALUE ^h1F;
	BYTE OPM_A1_A0 VALUE ^h0C;
	BYTE OPM_A1_A8 VALUE ^h06;
	BYTE OPM_A1_B0 VALUE ^h0A;
	BYTE OPM_A1_B8 VALUE ^h0A;
	BYTE OPM_A1_C0 VALUE ^h00;
	BYTE OPM_A1_C8 VALUE ^h00;
	BYTE OPM_A1_D0 VALUE ^h00;
	BYTE OPM_A1_D8 VALUE ^h00;
	BYTE OPM_A1_E0 VALUE ^hF6;
	BYTE OPM_A1_E8 VALUE ^hF6;
	BYTE OPM_A1_F0 VALUE ^hF6;
	BYTE OPM_A1_F8 VALUE ^hFA;

	BYTE OPM_A2_20 VALUE ^hFC;
	BYTE OPM_A2_40 VALUE ^h33;
	BYTE OPM_A2_48 VALUE ^h61;
	BYTE OPM_A2_50 VALUE ^h21;
	BYTE OPM_A2_58 VALUE ^h01;
	BYTE OPM_A2_60 VALUE ^h22;
	BYTE OPM_A2_68 VALUE ^h28;
	BYTE OPM_A2_70 VALUE ^h14;
	BYTE OPM_A2_78 VALUE ^h14;
	BYTE OPM_A2_80 VALUE ^h5F;
	BYTE OPM_A2_88 VALUE ^h1F;
	BYTE OPM_A2_90 VALUE ^h1F;
	BYTE OPM_A2_98 VALUE ^h9F;
	BYTE OPM_A2_A0 VALUE ^h04;
	BYTE OPM_A2_A8 VALUE ^h04;
	BYTE OPM_A2_B0 VALUE ^h08;
	BYTE OPM_A2_B8 VALUE ^h08;
	BYTE OPM_A2_C0 VALUE ^h03;
	BYTE OPM_A2_C8 VALUE ^h02;
	BYTE OPM_A2_D0 VALUE ^h09;
	BYTE OPM_A2_D8 VALUE ^h09;
	BYTE OPM_A2_E0 VALUE ^h26;
	BYTE OPM_A2_E8 VALUE ^h16;
	BYTE OPM_A2_F0 VALUE ^h2A;
	BYTE OPM_A2_F8 VALUE ^h2A;

	BYTE OPM_A3_20 VALUE ^hF8;
	BYTE OPM_A3_40 VALUE ^h3A;
	BYTE OPM_A3_48 VALUE ^h32;
	BYTE OPM_A3_50 VALUE ^h02;
	BYTE OPM_A3_58 VALUE ^h01;
	BYTE OPM_A3_60 VALUE ^h28;
	BYTE OPM_A3_68 VALUE ^h32;
	BYTE OPM_A3_70 VALUE ^h0E;
	BYTE OPM_A3_78 VALUE ^h08;
	BYTE OPM_A3_80 VALUE ^h5B;
	BYTE OPM_A3_88 VALUE ^h1F;
	BYTE OPM_A3_90 VALUE ^h19;
	BYTE OPM_A3_98 VALUE ^h50;
	BYTE OPM_A3_A0 VALUE ^h12;
	BYTE OPM_A3_A8 VALUE ^h14;
	BYTE OPM_A3_B0 VALUE ^h14;
	BYTE OPM_A3_B8 VALUE ^h1F;
	BYTE OPM_A3_C0 VALUE ^h00;
	BYTE OPM_A3_C8 VALUE ^h00;
	BYTE OPM_A3_D0 VALUE ^h00;
	BYTE OPM_A3_D8 VALUE ^h00;
	BYTE OPM_A3_E0 VALUE ^h26;
	BYTE OPM_A3_E8 VALUE ^h16;
	BYTE OPM_A3_F0 VALUE ^h86;
	BYTE OPM_A3_F8 VALUE ^h0A;

	BYTE OPM_A4_20 VALUE ^hFE;
	BYTE OPM_A4_40 VALUE ^h03;
	BYTE OPM_A4_48 VALUE ^h03;
	BYTE OPM_A4_50 VALUE ^h38;
	BYTE OPM_A4_58 VALUE ^h71;
	BYTE OPM_A4_60 VALUE ^h18;
	BYTE OPM_A4_68 VALUE ^h16;
	BYTE OPM_A4_70 VALUE ^h16;
	BYTE OPM_A4_78 VALUE ^h16;
	BYTE OPM_A4_80 VALUE ^h1F;
	BYTE OPM_A4_88 VALUE ^h0D;
	BYTE OPM_A4_90 VALUE ^h0D;
	BYTE OPM_A4_98 VALUE ^h0D;
	BYTE OPM_A4_A0 VALUE ^h1F;
	BYTE OPM_A4_A8 VALUE ^h1F;
	BYTE OPM_A4_B0 VALUE ^h1F;
	BYTE OPM_A4_B8 VALUE ^h1F;
	BYTE OPM_A4_C0 VALUE ^h00;
	BYTE OPM_A4_C8 VALUE ^h00;
	BYTE OPM_A4_D0 VALUE ^h00;
	BYTE OPM_A4_D8 VALUE ^h00;
	BYTE OPM_A4_E0 VALUE ^h06;
	BYTE OPM_A4_E8 VALUE ^h0A;
	BYTE OPM_A4_F0 VALUE ^h0A;
	BYTE OPM_A4_F8 VALUE ^h0A;

	BYTE OPM_A5_20 VALUE ^hE4;
	BYTE OPM_A5_40 VALUE ^h01;
	BYTE OPM_A5_48 VALUE ^h01;
	BYTE OPM_A5_50 VALUE ^h04;
	BYTE OPM_A5_58 VALUE ^h03;
	BYTE OPM_A5_60 VALUE ^h0C;
	BYTE OPM_A5_68 VALUE ^h0C;
	BYTE OPM_A5_70 VALUE ^h14;
	BYTE OPM_A5_78 VALUE ^h14;
	BYTE OPM_A5_80 VALUE ^h1F;
	BYTE OPM_A5_88 VALUE ^h1F;
	BYTE OPM_A5_90 VALUE ^h11;
	BYTE OPM_A5_98 VALUE ^h11;
	BYTE OPM_A5_A0 VALUE ^h1F;
	BYTE OPM_A5_A8 VALUE ^h1F;
	BYTE OPM_A5_B0 VALUE ^h1F;
	BYTE OPM_A5_B8 VALUE ^h1F;
	BYTE OPM_A5_C0 VALUE ^h00;
	BYTE OPM_A5_C8 VALUE ^h00;
	BYTE OPM_A5_D0 VALUE ^h00;
	BYTE OPM_A5_D8 VALUE ^h00;
	BYTE OPM_A5_E0 VALUE ^h06;
	BYTE OPM_A5_E8 VALUE ^h06;
	BYTE OPM_A5_F0 VALUE ^h0A;
	BYTE OPM_A5_F8 VALUE ^h0A;

	BYTE OPM_A6_20 VALUE ^hFA;
	BYTE OPM_A6_40 VALUE ^h11;
	BYTE OPM_A6_48 VALUE ^h11;
	BYTE OPM_A6_50 VALUE ^h12;
	BYTE OPM_A6_58 VALUE ^h11;
	BYTE OPM_A6_60 VALUE ^h18;
	BYTE OPM_A6_68 VALUE ^h1D;
	BYTE OPM_A6_70 VALUE ^h2D;
	BYTE OPM_A6_78 VALUE ^h14;
	BYTE OPM_A6_80 VALUE ^h11;
	BYTE OPM_A6_88 VALUE ^h11;
	BYTE OPM_A6_90 VALUE ^h5F;
	BYTE OPM_A6_98 VALUE ^h55;
	BYTE OPM_A6_A0 VALUE ^h0E;
	BYTE OPM_A6_A8 VALUE ^h11;
	BYTE OPM_A6_B0 VALUE ^h10;
	BYTE OPM_A6_B8 VALUE ^h1F;
	BYTE OPM_A6_C0 VALUE ^h00;
	BYTE OPM_A6_C8 VALUE ^h00;
	BYTE OPM_A6_D0 VALUE ^h00;
	BYTE OPM_A6_D8 VALUE ^h00;
	BYTE OPM_A6_E0 VALUE ^h16;
	BYTE OPM_A6_E8 VALUE ^h36;
	BYTE OPM_A6_F0 VALUE ^hA6;
	BYTE OPM_A6_F8 VALUE ^h0A;

	BYTE OPM_A7_20 VALUE ^hEC;
	BYTE OPM_A7_40 VALUE ^h51;
	BYTE OPM_A7_48 VALUE ^h32;
	BYTE OPM_A7_50 VALUE ^h54;
	BYTE OPM_A7_58 VALUE ^h32;
	BYTE OPM_A7_60 VALUE ^h15;
	BYTE OPM_A7_68 VALUE ^h14;
	BYTE OPM_A7_70 VALUE ^h14;
	BYTE OPM_A7_78 VALUE ^h14;
	BYTE OPM_A7_80 VALUE ^h1F;
	BYTE OPM_A7_88 VALUE ^h1F;
	BYTE OPM_A7_90 VALUE ^h12;
	BYTE OPM_A7_98 VALUE ^h12;
	BYTE OPM_A7_A0 VALUE ^h00;
	BYTE OPM_A7_A8 VALUE ^h00;
	BYTE OPM_A7_B0 VALUE ^h0A;
	BYTE OPM_A7_B8 VALUE ^h0A;
	BYTE OPM_A7_C0 VALUE ^h00;
	BYTE OPM_A7_C8 VALUE ^h00;
	BYTE OPM_A7_D0 VALUE ^h00;
	BYTE OPM_A7_D8 VALUE ^h00;
	BYTE OPM_A7_E0 VALUE ^h06;
	BYTE OPM_A7_E8 VALUE ^h06;
	BYTE OPM_A7_F0 VALUE ^h1A;
	BYTE OPM_A7_F8 VALUE ^h1A;

	BYTE OPM_A8_20 VALUE ^hFD;
	BYTE OPM_A8_40 VALUE ^h70;
	BYTE OPM_A8_48 VALUE ^h71;
	BYTE OPM_A8_50 VALUE ^h70;
	BYTE OPM_A8_58 VALUE ^h70;
	BYTE OPM_A8_60 VALUE ^h19;
	BYTE OPM_A8_68 VALUE ^h19;
	BYTE OPM_A8_70 VALUE ^h1A;
	BYTE OPM_A8_78 VALUE ^h19;
	BYTE OPM_A8_80 VALUE ^h4C;
	BYTE OPM_A8_88 VALUE ^h50;
	BYTE OPM_A8_90 VALUE ^h0F;
	BYTE OPM_A8_98 VALUE ^h12;
	BYTE OPM_A8_A0 VALUE ^h0B;
	BYTE OPM_A8_A8 VALUE ^h01;
	BYTE OPM_A8_B0 VALUE ^h05;
	BYTE OPM_A8_B8 VALUE ^h02;
	BYTE OPM_A8_C0 VALUE ^h01;
	BYTE OPM_A8_C8 VALUE ^h00;
	BYTE OPM_A8_D0 VALUE ^h00;
	BYTE OPM_A8_D8 VALUE ^h00;
	BYTE OPM_A8_E0 VALUE ^h26;
	BYTE OPM_A8_E8 VALUE ^h2A;
	BYTE OPM_A8_F0 VALUE ^h2A;
	BYTE OPM_A8_F8 VALUE ^h1A;

	BYTE OPM_A9_20 VALUE ^hFD;
	BYTE OPM_A9_40 VALUE ^h01;
	BYTE OPM_A9_48 VALUE ^h01;
	BYTE OPM_A9_50 VALUE ^h01;
	BYTE OPM_A9_58 VALUE ^h01;
	BYTE OPM_A9_60 VALUE ^h16;
	BYTE OPM_A9_68 VALUE ^h17;
	BYTE OPM_A9_70 VALUE ^h17;
	BYTE OPM_A9_78 VALUE ^h17;
	BYTE OPM_A9_80 VALUE ^h5F;
	BYTE OPM_A9_88 VALUE ^h5E;
	BYTE OPM_A9_90 VALUE ^h5E;
	BYTE OPM_A9_98 VALUE ^h5E;
	BYTE OPM_A9_A0 VALUE ^h07;
	BYTE OPM_A9_A8 VALUE ^h1F;
	BYTE OPM_A9_B0 VALUE ^h1F;
	BYTE OPM_A9_B8 VALUE ^h1F;
	BYTE OPM_A9_C0 VALUE ^h00;
	BYTE OPM_A9_C8 VALUE ^h00;
	BYTE OPM_A9_D0 VALUE ^h00;
	BYTE OPM_A9_D8 VALUE ^h00;
	BYTE OPM_A9_E0 VALUE ^h16;
	BYTE OPM_A9_E8 VALUE ^h0A;
	BYTE OPM_A9_F0 VALUE ^h0A;
	BYTE OPM_A9_F8 VALUE ^h0A;

	BYTE OPM_AA_20 VALUE ^hFA;
	BYTE OPM_AA_40 VALUE ^h16;
	BYTE OPM_AA_48 VALUE ^h11;
	BYTE OPM_AA_50 VALUE ^h1F;
	BYTE OPM_AA_58 VALUE ^h12;
	BYTE OPM_AA_60 VALUE ^h1C;
	BYTE OPM_AA_68 VALUE ^h13;
	BYTE OPM_AA_70 VALUE ^h32;
	BYTE OPM_AA_78 VALUE ^h14;
	BYTE OPM_AA_80 VALUE ^h5F;
	BYTE OPM_AA_88 VALUE ^h5F;
	BYTE OPM_AA_90 VALUE ^h5F;
	BYTE OPM_AA_98 VALUE ^h58;
	BYTE OPM_AA_A0 VALUE ^h06;
	BYTE OPM_AA_A8 VALUE ^h1F;
	BYTE OPM_AA_B0 VALUE ^h09;
	BYTE OPM_AA_B8 VALUE ^h10;
	BYTE OPM_AA_C0 VALUE ^h00;
	BYTE OPM_AA_C8 VALUE ^h00;
	BYTE OPM_AA_D0 VALUE ^h04;
	BYTE OPM_AA_D8 VALUE ^h09;
	BYTE OPM_AA_E0 VALUE ^h36;
	BYTE OPM_AA_E8 VALUE ^h06;
	BYTE OPM_AA_F0 VALUE ^h26;
	BYTE OPM_AA_F8 VALUE ^h0A;

	BYTE OPM_AB_20 VALUE ^hF4;
	BYTE OPM_AB_40 VALUE ^h71;
	BYTE OPM_AB_48 VALUE ^h0E;
	BYTE OPM_AB_50 VALUE ^h31;
	BYTE OPM_AB_58 VALUE ^h71;
	BYTE OPM_AB_60 VALUE ^h1C;
	BYTE OPM_AB_68 VALUE ^h3C;
	BYTE OPM_AB_70 VALUE ^h14;
	BYTE OPM_AB_78 VALUE ^h14;
	BYTE OPM_AB_80 VALUE ^h1F;
	BYTE OPM_AB_88 VALUE ^h1F;
	BYTE OPM_AB_90 VALUE ^h1F;
	BYTE OPM_AB_98 VALUE ^h1F;
	BYTE OPM_AB_A0 VALUE ^h1F;
	BYTE OPM_AB_A8 VALUE ^h1F;
	BYTE OPM_AB_B0 VALUE ^h1F;
	BYTE OPM_AB_B8 VALUE ^h1F;
	BYTE OPM_AB_C0 VALUE ^h07;
	BYTE OPM_AB_C8 VALUE ^h0A;
	BYTE OPM_AB_D0 VALUE ^h07;
	BYTE OPM_AB_D8 VALUE ^h07;
	BYTE OPM_AB_E0 VALUE ^h06;
	BYTE OPM_AB_E8 VALUE ^h06;
	BYTE OPM_AB_F0 VALUE ^h0A;
	BYTE OPM_AB_F8 VALUE ^h0A;

	BYTE OPM_AC_20 VALUE ^hC1;
	BYTE OPM_AC_40 VALUE ^h05;
	BYTE OPM_AC_48 VALUE ^h0A;
	BYTE OPM_AC_50 VALUE ^h00;
	BYTE OPM_AC_58 VALUE ^h00;
	BYTE OPM_AC_60 VALUE ^h15;
	BYTE OPM_AC_68 VALUE ^h19;
	BYTE OPM_AC_70 VALUE ^h25;
	BYTE OPM_AC_78 VALUE ^h14;
	BYTE OPM_AC_80 VALUE ^h1F;
	BYTE OPM_AC_88 VALUE ^h1F;
	BYTE OPM_AC_90 VALUE ^h1F;
	BYTE OPM_AC_98 VALUE ^h1F;
	BYTE OPM_AC_A0 VALUE ^h10;
	BYTE OPM_AC_A8 VALUE ^h11;
	BYTE OPM_AC_B0 VALUE ^h13;
	BYTE OPM_AC_B8 VALUE ^h08;
	BYTE OPM_AC_C0 VALUE ^h00;
	BYTE OPM_AC_C8 VALUE ^h00;
	BYTE OPM_AC_D0 VALUE ^h00;
	BYTE OPM_AC_D8 VALUE ^h00;
	BYTE OPM_AC_E0 VALUE ^hF6;
	BYTE OPM_AC_E8 VALUE ^hF6;
	BYTE OPM_AC_F0 VALUE ^hF6;
	BYTE OPM_AC_F8 VALUE ^hFA;

	BYTE OPM_AD_20 VALUE ^hD2;
	BYTE OPM_AD_40 VALUE ^h00;
	BYTE OPM_AD_48 VALUE ^h00;
	BYTE OPM_AD_50 VALUE ^h08;
	BYTE OPM_AD_58 VALUE ^h01;
	BYTE OPM_AD_60 VALUE ^h1B;
	BYTE OPM_AD_68 VALUE ^h15;
	BYTE OPM_AD_70 VALUE ^h2B;
	BYTE OPM_AD_78 VALUE ^h14;
	BYTE OPM_AD_80 VALUE ^h1F;
	BYTE OPM_AD_88 VALUE ^h1F;
	BYTE OPM_AD_90 VALUE ^h1F;
	BYTE OPM_AD_98 VALUE ^h1F;
	BYTE OPM_AD_A0 VALUE ^h1F;
	BYTE OPM_AD_A8 VALUE ^h0E;
	BYTE OPM_AD_B0 VALUE ^h0C;
	BYTE OPM_AD_B8 VALUE ^h0B;
	BYTE OPM_AD_C0 VALUE ^h00;
	BYTE OPM_AD_C8 VALUE ^h0A;
	BYTE OPM_AD_D0 VALUE ^h0C;
	BYTE OPM_AD_D8 VALUE ^h09;
	BYTE OPM_AD_E0 VALUE ^h06;
	BYTE OPM_AD_E8 VALUE ^h36;
	BYTE OPM_AD_F0 VALUE ^h86;
	BYTE OPM_AD_F8 VALUE ^h1A;

	BYTE OPM_AE_20 VALUE ^hFD;
	BYTE OPM_AE_40 VALUE ^h01;
	BYTE OPM_AE_48 VALUE ^h50;
	BYTE OPM_AE_50 VALUE ^h21;
	BYTE OPM_AE_58 VALUE ^h01;
	BYTE OPM_AE_60 VALUE ^h19;
	BYTE OPM_AE_68 VALUE ^h15;
	BYTE OPM_AE_70 VALUE ^h15;
	BYTE OPM_AE_78 VALUE ^h15;
	BYTE OPM_AE_80 VALUE ^h12;
	BYTE OPM_AE_88 VALUE ^h14;
	BYTE OPM_AE_90 VALUE ^h14;
	BYTE OPM_AE_98 VALUE ^h0F;
	BYTE OPM_AE_A0 VALUE ^h0A;
	BYTE OPM_AE_A8 VALUE ^h05;
	BYTE OPM_AE_B0 VALUE ^h05;
	BYTE OPM_AE_B8 VALUE ^h05;
	BYTE OPM_AE_C0 VALUE ^h00;
	BYTE OPM_AE_C8 VALUE ^h00;
	BYTE OPM_AE_D0 VALUE ^h00;
	BYTE OPM_AE_D8 VALUE ^h00;
	BYTE OPM_AE_E0 VALUE ^h26;
	BYTE OPM_AE_E8 VALUE ^h2A;
	BYTE OPM_AE_F0 VALUE ^h2A;
	BYTE OPM_AE_F8 VALUE ^h1A;

	BYTE OPM_AF_20 VALUE ^hFC;
	BYTE OPM_AF_40 VALUE ^h77;
	BYTE OPM_AF_48 VALUE ^h37;
	BYTE OPM_AF_50 VALUE ^h32;
	BYTE OPM_AF_58 VALUE ^h72;
	BYTE OPM_AF_60 VALUE ^h1E;
	BYTE OPM_AF_68 VALUE ^h1E;
	BYTE OPM_AF_70 VALUE ^h14;
	BYTE OPM_AF_78 VALUE ^h14;
	BYTE OPM_AF_80 VALUE ^h1F;
	BYTE OPM_AF_88 VALUE ^h1F;
	BYTE OPM_AF_90 VALUE ^h9F;
	BYTE OPM_AF_98 VALUE ^h9F;
	BYTE OPM_AF_A0 VALUE ^h1F;
	BYTE OPM_AF_A8 VALUE ^h1F;
	BYTE OPM_AF_B0 VALUE ^h1F;
	BYTE OPM_AF_B8 VALUE ^h1F;
	BYTE OPM_AF_C0 VALUE ^h08;
	BYTE OPM_AF_C8 VALUE ^h08;
	BYTE OPM_AF_D0 VALUE ^h09;
	BYTE OPM_AF_D8 VALUE ^h09;
	BYTE OPM_AF_E0 VALUE ^h06;
	BYTE OPM_AF_E8 VALUE ^h06;
	BYTE OPM_AF_F0 VALUE ^h0A;
	BYTE OPM_AF_F8 VALUE ^h0F;
	
	BYTE OPM_REG_OUT;
	BYTE OPM_DATA_OUT;
	
	BYTE OPM_NOTE;
	BYTE OPM_OCTAVE;
	
	BYTE OPM0_INST;
	BYTE OPM1_INST;
	BYTE OPM2_INST;
	BYTE OPM3_INST;
	BYTE OPM4_INST;
	BYTE OPM5_INST;
	
	DISPLAY "GEMINI FM VERSION 1.0";
	DISPLAY "CREATED BY _NETNOMAD";
	DISPLAY "";
	
	{----------------------------------------------------------}
	{-- FIRST WE SEARCH FOR A YAMAHA SFG DEVICE IN ALL SLOTS --}
	{----------------------------------------------------------}
	MOVE "MCHFM0" TO GOAL_STRING;
	MOVE 6 TO DETECT_STRING_LENGTH;
	MOVE DETECT_MCHFM0_ADDR TO DETECT_ADDR;
	CALL SUB_SEARCH_FOR_DETECTION_STRING;
	
	MOVE 1 TO OPM_NOT_FOUND;
	
	{---------------------------------------------------------------}
	{-- NOW WE SEARCH FOR INTERNAL OR CLONE MSX-MUSIC DEVICE      --}
	{-- THESE CAN BE USED IMMEDIATELY AND SHOULD NOT BE ACTIVATED --}
	{---------------------------------------------------------------}
	MOVE "APRLOPLL" TO GOAL_STRING;
	MOVE 8 TO DETECT_STRING_LENGTH;
	MOVE DETECT_APRLOPLL_ADDR TO DETECT_ADDR;
	CALL SUB_SEARCH_FOR_DETECTION_STRING;
	
	{---------------------------------------------------------------}
	{-- NOW WE SEARCH FOR PANASOFT FM-PAC, WHICH MUST BE ENABLED  --}
	{---------------------------------------------------------------}
	MOVE "PAC2OPLL" TO GOAL_STRING;
	CALL SUB_SEARCH_FOR_DETECTION_STRING;

	
	DISPLAY "!!! NO SFG OR FM-PAC FOUND !!!"
	
	GOTO END;
	
	{--Adapted from http://map.grauw.nl/sources/getslot.php
	SUB_GETSLT:
		BYTE GS01 VALUE ^hDB;
		BYTE GS02 VALUE ^hA8;
		
		BYTE GS04 VALUE ^hCB;
		BYTE GS05 VALUE ^h7C;
		BYTE GS06 VALUE ^h28;
		BYTE GS07 VALUE ^h04;
		BYTE GS08 VALUE ^h0F;
		BYTE GS09 VALUE ^h0F;
		BYTE GS0A VALUE ^h0F;
		BYTE GS0B VALUE ^h0F;
		BYTE GS0C VALUE ^hCB;
		BYTE GS0D VALUE ^h74;
		BYTE GS0E VALUE ^h28;
		BYTE GS0F VALUE ^h02;
		BYTE GS10 VALUE ^h0F;
		BYTE GS11 VALUE ^h0F;
		BYTE GS12 VALUE ^hE6;
		BYTE GS13 VALUE ^h03;
		BYTE GS14 VALUE ^h4F;
		BYTE GS15 VALUE ^h06;
		BYTE GS16 VALUE ^h00;
		BYTE GS17 VALUE ^hEB;
		BYTE GS18 VALUE ^h21;
		BYTE GS19 VALUE ^hC1;
		BYTE GS1A VALUE ^hFC;
		BYTE GS1B VALUE ^h09;
		BYTE GS1C VALUE ^h7E;
		BYTE GS1D VALUE ^hE6;
		BYTE GS1E VALUE ^h80;
		BYTE GS1F VALUE ^hB1;
		BYTE GS20 VALUE ^h4F;
		BYTE GS21 VALUE ^h23;
		BYTE GS22 VALUE ^h23;
		BYTE GS23 VALUE ^h23;
		BYTE GS24 VALUE ^h23;
		BYTE GS25 VALUE ^h7E;
		BYTE GS26 VALUE ^hEB;
		BYTE GS27 VALUE ^hCB;
		BYTE GS28 VALUE ^h7C;
		BYTE GS29 VALUE ^h28;
		BYTE GS2A VALUE ^h04;
		BYTE GS2B VALUE ^h0F;
		BYTE GS2C VALUE ^h0F;
		BYTE GS2D VALUE ^h0F;
		BYTE GS2E VALUE ^h0F;
		BYTE GS2F VALUE ^hCB;
		BYTE GS30 VALUE ^h74;
		BYTE GS31 VALUE ^h20;
		BYTE GS32 VALUE ^h02;
		BYTE GS33 VALUE ^h07;
		BYTE GS34 VALUE ^h07;
		BYTE GS35 VALUE ^hE6;
		BYTE GS36 VALUE ^h0C;
		BYTE GS37 VALUE ^hB1;
		BYTE GS38 VALUE ^hC9;
	EXIT;
	
	
	PERFORMANCE_COMPLETE:
	ENABLE INTERRUPTS;
	DISPLAY "PERFORMANCE COMPLETE";
	
	TERMINATE:
	{------------------------------------------------------------}
	{-- TERMINATION HANDLER - RESET VBLANK HOOK AND KILL AUDIO --}
	{------------------------------------------------------------}
		DISABLE INTERRUPTS;
		MOVE OLD_HTIMI_HOOK TO HTIMI_HOOK;
		ENABLE INTERRUPTS;
		
		CALL SUB_ALL_NOTE_OFF;
	
	GOTO END;

	
	PAC2_ACTIVATE:
	{------------------------------------------------------------}
	{-- INTERSLOT CALL TO OPLINI FM-BIOS ROUTINE               --}
	{------------------------------------------------------------}
		MCALL DOS_CALLF;
		BYTE OPLLSLOT;
		WORD ADR VALUE ^h5009;
	EXIT;
	
	LABEL_DEVICE_FOUND:
	{------------------------------------------------------}
	{-- WE FOUND AN MSX-MUSIC DEVICE. ENABLE IF PANASOFT --}
	{------------------------------------------------------}
	ENABLE INTERRUPTS;
	
	MOVE DETECT_SLOT TO DETECT_CHAR_IN;
	AND DETECT_CHAR_IN WITH ^b00000011;
	CONVERT DETECT_CHAR_IN TO STR_OUT;
	
	
	IF DETECT_SLOT > 127 THEN
		MOVE DETECT_SLOT TO DETECT_CHAR_IN;
		AND DETECT_CHAR_IN WITH ^b00001100
		DIVIDE DETECT_CHAR_IN BY ^b100;
		CONVERT DETECT_CHAR_IN TO GOAL_STRING;
		APPEND ":" TO STR_OUT;
		APPEND GOAL_STRING TO STR_OUT;
	FI;
	
	
	IF OPM_NOT_FOUND THEN
		DISPLAY "OPLL DEVICE FOUND IN SLOT ",STR_OUT;
	ELSE
		DISPLAY "OPM DEVICE FOUND IN SLOT ",STR_OUT;
	FI;
	
	{--CONVERT DETECT_SLOT TO  HEX STR_OUT;
	{--DISPLAY "DETECT SLOT ",STR_OUT;
	
	IF FOUND_STRING = "PAC2OPLL" THEN
		DISPLAY "ENABLING FM-PAC...";
		MOVE DETECT_SLOT TO OPLLSLOT;
		CALL PAC2_ACTIVATE;
	FI;
	
	{-------------------------------}
	{-- INITIALIZE FM DRUM VALUES --}
	{-- AND HARDCODED USER VOICE  --}
	{-------------------------------}
	
	MCALL SUB_GETSLT USING ,,^h7F00 GIVING ,,,RETURN_SLOT;
	MCALL BIOS_ENASLT USING ,,^b0100000000000000,DETECT_SLOT;
	
	IF OPM_NOT_FOUND THEN 
		DISPLAY "INITIALIZING OPLL...";
		{--DRUMS
		
		MOVE ^h16 TO OPLL_REG_OUT;
		MOVE ^h20 TO OPLL_DATA_OUT;
		CALL SUB_OPLL_WRITE;
		MOVE ^h17 TO OPLL_REG_OUT;
		MOVE ^h50 TO OPLL_DATA_OUT;
		CALL SUB_OPLL_WRITE;
		MOVE ^h18 TO OPLL_REG_OUT;
		MOVE ^hC0 TO OPLL_DATA_OUT;
		CALL SUB_OPLL_WRITE;
		MOVE ^h26 TO OPLL_REG_OUT;
		MOVE ^h05 TO OPLL_DATA_OUT;
		CALL SUB_OPLL_WRITE;
		MOVE ^h27 TO OPLL_REG_OUT;
		MOVE ^h05 TO OPLL_DATA_OUT;
		CALL SUB_OPLL_WRITE;
		MOVE ^h28 TO OPLL_REG_OUT;
		MOVE ^h01 TO OPLL_DATA_OUT;
		CALL SUB_OPLL_WRITE;
		MOVE ^h0E TO OPLL_REG_OUT;
		MOVE ^h20 TO OPLL_DATA_OUT;
		
		{--BELL
		MOVE ^h00 TO OPLL_REG_OUT;
		MOVE ^h07 TO OPLL_DATA_OUT;
		CALL SUB_OPLL_WRITE;
		MOVE ^h01 TO OPLL_REG_OUT;
		MOVE ^h02 TO OPLL_DATA_OUT;
		CALL SUB_OPLL_WRITE;
		MOVE ^h02 TO OPLL_REG_OUT;
		MOVE ^h9B TO OPLL_DATA_OUT;
		CALL SUB_OPLL_WRITE;
		MOVE ^h03 TO OPLL_REG_OUT;
		MOVE ^h04 TO OPLL_DATA_OUT;
		CALL SUB_OPLL_WRITE;
		MOVE ^h04 TO OPLL_REG_OUT;
		MOVE ^hF2 TO OPLL_DATA_OUT;
		CALL SUB_OPLL_WRITE;
		MOVE ^h05 TO OPLL_REG_OUT;
		MOVE ^hF4 TO OPLL_DATA_OUT;
		CALL SUB_OPLL_WRITE;
		MOVE ^h06 TO OPLL_REG_OUT;
		MOVE ^h60 TO OPLL_DATA_OUT;
		CALL SUB_OPLL_WRITE;
		MOVE ^h07 TO OPLL_REG_OUT;
		MOVE ^hF2 TO OPLL_DATA_OUT;
		CALL SUB_OPLL_WRITE;
	ELSE
		DISPLAY "INITIALIZING OPM..."	
		{-- KICK/TOM
		MOVE ^h26 TO OPM_REG_OUT;
		MOVE ^hFF TO OPM_DATA_OUT;
		CALL SUB_OPM_WRITE;

		MOVE ^h46 TO OPM_REG_OUT;
		MOVE ^h00 TO OPM_DATA_OUT;
		CALL SUB_OPM_WRITE;

		MOVE ^h4E TO OPM_REG_OUT;
		MOVE ^h03 TO OPM_DATA_OUT;
		CALL SUB_OPM_WRITE;

		MOVE ^h56 TO OPM_REG_OUT;
		MOVE ^h00 TO OPM_DATA_OUT;
		CALL SUB_OPM_WRITE;

		MOVE ^h5E TO OPM_REG_OUT;
		MOVE ^h01 TO OPM_DATA_OUT;
		CALL SUB_OPM_WRITE;

		MOVE ^h66 TO OPM_REG_OUT;
		MOVE ^h14 TO OPM_DATA_OUT;
		CALL SUB_OPM_WRITE;

		MOVE ^h6E TO OPM_REG_OUT;
		MOVE ^h00 TO OPM_DATA_OUT;
		CALL SUB_OPM_WRITE;

		MOVE ^h76 TO OPM_REG_OUT;
		MOVE ^hFF TO OPM_DATA_OUT;
		CALL SUB_OPM_WRITE;

		MOVE ^h7E TO OPM_REG_OUT;
		MOVE ^h7F TO OPM_DATA_OUT;
		CALL SUB_OPM_WRITE;

		MOVE ^h86 TO OPM_REG_OUT;
		MOVE ^h1A TO OPM_DATA_OUT;
		CALL SUB_OPM_WRITE;

		MOVE ^h8E TO OPM_REG_OUT;
		MOVE ^h9C TO OPM_DATA_OUT;
		CALL SUB_OPM_WRITE;

		MOVE ^h96 TO OPM_REG_OUT;
		MOVE ^h9C TO OPM_DATA_OUT;
		CALL SUB_OPM_WRITE;

		MOVE ^h9E TO OPM_REG_OUT;
		MOVE ^h9F TO OPM_DATA_OUT;
		CALL SUB_OPM_WRITE;

		MOVE ^hA6 TO OPM_REG_OUT;
		MOVE ^h15 TO OPM_DATA_OUT;
		CALL SUB_OPM_WRITE;

		MOVE ^hAE TO OPM_REG_OUT;
		MOVE ^h13 TO OPM_DATA_OUT;
		CALL SUB_OPM_WRITE;

		MOVE ^hB6 TO OPM_REG_OUT;
		MOVE ^h13 TO OPM_DATA_OUT;
		CALL SUB_OPM_WRITE;

		MOVE ^hBE TO OPM_REG_OUT;
		MOVE ^h1F TO OPM_DATA_OUT;
		CALL SUB_OPM_WRITE;

		MOVE ^hC6 TO OPM_REG_OUT;
		MOVE ^h00 TO OPM_DATA_OUT;
		CALL SUB_OPM_WRITE;

		MOVE ^hCE TO OPM_REG_OUT;
		MOVE ^h00 TO OPM_DATA_OUT;
		CALL SUB_OPM_WRITE;

		MOVE ^hD6 TO OPM_REG_OUT;
		MOVE ^h00 TO OPM_DATA_OUT;
		CALL SUB_OPM_WRITE;

		MOVE ^hDE TO OPM_REG_OUT;
		MOVE ^h0E TO OPM_DATA_OUT;
		CALL SUB_OPM_WRITE;

		MOVE ^hE6 TO OPM_REG_OUT;
		MOVE ^hF5 TO OPM_DATA_OUT;
		CALL SUB_OPM_WRITE;

		MOVE ^hEE TO OPM_REG_OUT;
		MOVE ^hFF TO OPM_DATA_OUT;
		CALL SUB_OPM_WRITE;

		MOVE ^hF6 TO OPM_REG_OUT;
		MOVE ^hFF TO OPM_DATA_OUT;
		CALL SUB_OPM_WRITE;

		MOVE ^hFE TO OPM_REG_OUT;
		MOVE ^h09 TO OPM_DATA_OUT;
		CALL SUB_OPM_WRITE;
	
		{--SNARE/HAT/CRASH
		MOVE ^h0F TO OPM_REG_OUT;
		MOVE ^h94 TO OPM_DATA_OUT;
		CALL SUB_OPM_WRITE;

		MOVE ^h27 TO OPM_REG_OUT;
		MOVE ^hC0 TO OPM_DATA_OUT;
		CALL SUB_OPM_WRITE;

		MOVE ^h47 TO OPM_REG_OUT;
		MOVE ^h00 TO OPM_DATA_OUT;
		CALL SUB_OPM_WRITE;

		MOVE ^h4F TO OPM_REG_OUT;
		MOVE ^h00 TO OPM_DATA_OUT;
		CALL SUB_OPM_WRITE;

		MOVE ^h57 TO OPM_REG_OUT;
		MOVE ^h00 TO OPM_DATA_OUT;
		CALL SUB_OPM_WRITE;

		MOVE ^h5F TO OPM_REG_OUT;
		MOVE ^h00 TO OPM_DATA_OUT;
		CALL SUB_OPM_WRITE;

		MOVE ^h67 TO OPM_REG_OUT;
		MOVE ^h7F TO OPM_DATA_OUT;
		CALL SUB_OPM_WRITE;

		MOVE ^h6F TO OPM_REG_OUT;
		MOVE ^h7F TO OPM_DATA_OUT;
		CALL SUB_OPM_WRITE;

		MOVE ^h77 TO OPM_REG_OUT;
		MOVE ^h7F TO OPM_DATA_OUT;
		CALL SUB_OPM_WRITE;

		MOVE ^h7F TO OPM_REG_OUT;
		MOVE ^h14 TO OPM_DATA_OUT;
		CALL SUB_OPM_WRITE;

		MOVE ^h87 TO OPM_REG_OUT;
		MOVE ^h1F TO OPM_DATA_OUT;
		CALL SUB_OPM_WRITE;

		MOVE ^h8F TO OPM_REG_OUT;
		MOVE ^h1F TO OPM_DATA_OUT;
		CALL SUB_OPM_WRITE;

		MOVE ^h97 TO OPM_REG_OUT;
		MOVE ^h1F TO OPM_DATA_OUT;
		CALL SUB_OPM_WRITE;

		MOVE ^h9F TO OPM_REG_OUT;
		MOVE ^h1F TO OPM_DATA_OUT;
		CALL SUB_OPM_WRITE;

		MOVE ^hA7 TO OPM_REG_OUT;
		MOVE ^h1F TO OPM_DATA_OUT;
		CALL SUB_OPM_WRITE;

		MOVE ^hAF TO OPM_REG_OUT;
		MOVE ^h1F TO OPM_DATA_OUT;
		CALL SUB_OPM_WRITE;

		MOVE ^hB7 TO OPM_REG_OUT;
		MOVE ^h1F TO OPM_DATA_OUT;
		CALL SUB_OPM_WRITE;

		MOVE ^hBF TO OPM_REG_OUT;
		MOVE ^h00 TO OPM_DATA_OUT;
		CALL SUB_OPM_WRITE;

		MOVE ^hC7 TO OPM_REG_OUT;
		MOVE ^h1F TO OPM_DATA_OUT;
		CALL SUB_OPM_WRITE;

		MOVE ^hCF TO OPM_REG_OUT;
		MOVE ^h1F TO OPM_DATA_OUT;
		CALL SUB_OPM_WRITE;

		MOVE ^hD7 TO OPM_REG_OUT;
		MOVE ^h1F TO OPM_DATA_OUT;
		CALL SUB_OPM_WRITE;

		MOVE ^hDF TO OPM_REG_OUT;
		MOVE ^h14 TO OPM_DATA_OUT;
		CALL SUB_OPM_WRITE;

		MOVE ^hE7 TO OPM_REG_OUT;
		MOVE ^h0F TO OPM_DATA_OUT;
		CALL SUB_OPM_WRITE;

		MOVE ^hEF TO OPM_REG_OUT;
		MOVE ^h0F TO OPM_DATA_OUT;
		CALL SUB_OPM_WRITE;

		MOVE ^hF7 TO OPM_REG_OUT;
		MOVE ^h0F TO OPM_DATA_OUT;
		CALL SUB_OPM_WRITE;

		MOVE ^hFF TO OPM_REG_OUT;
		MOVE ^h0F TO OPM_DATA_OUT;
		CALL SUB_OPM_WRITE;
	FI;
	
	MCALL BIOS_ENASLT USING ,,^b0100000000000000,RETURN_SLOT; 
	ENABLE INTERRUPTS;
	
	{----------}
	{-- MAIN --}
	{----------}
	
	{-----------------------------------------------------------------------------}
	{-- LOAD THE PERFORMANCE DATA INTO USER AREA OF RAM                         --}
	{-- THE STACK EXISTS IN THE USER AREA SO LET'S GIVE IT 500 BYTES TO BE SAFE --}
	{-----------------------------------------------------------------------------}
	SUBTRACT ^h500 FROM TPA_END GIVING USER_AREA_END;
	
	
	DISPLAY "";
	DISPLAY "LOADING PERFORMANCE DATA..."
	OPEN INFILE;
	DO
		IF SONG_LOAD_POINTER = USER_AREA_END THEN
			CLOSE INFILE;
			DISPLAY "!!! OUT OF MEMORY !!!";
			GOTO TERMINATE;
		FI;
		MOVE INCHAR TO LASTCHAR;
		READ INFILE;
		
		IF INCHAR = ^h1A THEN
			IF LASTCHAR = ^h1A THEN
				EXITDO;
			FI;
		FI;
		
		IF INCHAR = ^h00 THEN
			IF LASTCHAR = ^h00 THEN
				EXITDO;
			FI;
		FI;
		
		MOVE INCHAR TO @SONG_LOAD_POINTER;
		ADD 1 TO SONG_LOAD_POINTER;

	OD;
	CLOSE INFILE;
	
	SUBTRACT GEMINI_COMMAND_POINTER FROM SONG_LOAD_POINTER GIVING DUMMY_WORD;
	IF DUMMY_WORD < 3 THEN
		DISPLAY "!!! EMPTY DATA FILE !!!"
		GOTO TERMINATE;
	FI;
	

	CONVERT GEMINI_COMMAND_POINTER TO HEX STR_OUT;
	DISPLAY "DATA START ADDRESS: ",STR_OUT;

	CONVERT SONG_LOAD_POINTER TO HEX STR_OUT;
	DISPLAY "DATA END ADDRESS:   ",STR_OUT;
	MOVE 1 TO GEMINI_NOT_PAUSED;
	
	DISPLAY "";
	DISPLAY "PLAYING...";
	DISPLAY " ";
	
	
	{----------------------------------------------------------------------------}
	{-- ASSIGN VBLANK INTERUPT HANDLER AND PROGRAM TERMINATE INTERRUPT HANDLER --}
	{----------------------------------------------------------------------------}
	DISABLE INTERRUPTS;
	MOVE HTIMI_HOOK TO OLD_HTIMI_HOOK;
	MOVE NEW_HTIMI_HOOK TO HTIMI_HOOK;
	ENABLE INTERRUPTS;
	MCALL DOS2_BIOS USING ^h63, #TERMINATE;
	
	
	MAIN:
	
	{------------------------------------------------------------------}
	{-- IF THE PERFORMANCE ROUTINE PAUSES THE MUSIC, END THE PROGRAM --}
	{------------------------------------------------------------------}
	IF SONG_DONE = 1 THEN
		GOTO PERFORMANCE_COMPLETE;
	FI;
	
	IF GEMINI_COMMAND_POINTER > SONG_LOAD_POINTER THEN
		GOTO PERFORMANCE_COMPLETE;
	FI;
	
	MOVE NEWKEY7 TO INCHAR;
	AND INCHAR WITH ^b00000100;
	IF INCHAR = 0 THEN
		GOTO TERMINATE;
	FI;
	
	IF GEMINI_NOT_PAUSED = 1 THEN
		IF WHEEL_POSITION < 32786 THEN
			DISPLAY "X~1E~";
		ELSE
			DISPLAY "+~1E~";
		FI;
		ADD 5000 TO WHEEL_POSITION;
	FI;

	GOTO MAIN;
	
	VBLANK:
	{--------------------}
	{-- VBLANK HANDLER --}
	{--------------------}
		IF PAUSE_DEBOUNCE > 30 THEN
			MCALL BIOS_GTTRIG USING ,,,0 GIVING ,,,SPACE_PRESSED;
			IF SPACE_PRESSED = ^hFF THEN
				CALL SUB_PAUSE_TOGGLE;
				MOVE 0 TO PAUSE_DEBOUNCE;
			FI;
		ELSE 
			ADD 1 TO PAUSE_DEBOUNCE;
		FI;
		
	GEMINI_ISR:	
		IF GEMINI_NOT_PAUSED <> 0 THEN
			IF TEMPO_COUNTER = TEMPO THEN
				MOVE 0 TO TEMPO_COUNTER;
				IF WAIT_COUNT > 0 THEN
					SUBTRACT 1 FROM WAIT_COUNT;
				FI;
				IF WAIT_COUNT = 0 THEN
					MCALL SUB_GETSLT USING ,,^h7F00 GIVING ,,,RETURN_SLOT;
					MCALL BIOS_ENASLT USING ,,^b0100000000000000,DETECT_SLOT;
					
					WHILE WAIT_COUNT = 0 DO
						MOVE @GEMINI_COMMAND_POINTER TO GEMINI_COMMAND;
						IF OPM_NOT_FOUND THEN
							SWITCH ON GEMINI_COMMAND_BYTECODE:
								^h01: MOVE GEMINI_COMMAND_DATA TO TEMPO;
								^h02: CALL SUB_OPLL_NOTE_OFF;
								^h03: MOVE GEMINI_COMMAND_DATA TO WAIT_COUNT;
								^h04: CALL SUB_SET_LOOP;
								^h0F: 	BEGIN
											MOVE 1 TO SONG_DONE;
											MOVE 255 TO WAIT_COUNT;
											{--MCALL BIOS_ENASLT USING ,,^b0100000000000000,RAMAD1;
											{--EXIT; 
										END;
								^h10 - ^h16: CALL SUB_OPLL_NOTE_ON;
								^h20 - ^h25: CALL SUB_OPLL_SET_INSTRUMENT;
								^h30 - ^h3A: CALL SUB_OPLL_SET_VOLUME;
								^h40 - ^h46: CALL SUB_OPLL_SET_DETUNE;
							ENDSWITCH;
						ELSE							
							SWITCH ON GEMINI_COMMAND_BYTECODE:
								^h01: MOVE GEMINI_COMMAND_DATA TO TEMPO;
								^h02: CALL SUB_OPM_NOTE_OFF;
								^h03: MOVE GEMINI_COMMAND_DATA TO WAIT_COUNT;
								^h04: CALL SUB_SET_LOOP;
								^h0F: 	BEGIN
											MOVE 1 TO SONG_DONE;
											MOVE 255 TO WAIT_COUNT;
											{--MCALL BIOS_ENASLT USING ,,^b0100000000000000,RAMAD1;
											{--EXIT; 
										END;
								^h10 - ^h16: CALL SUB_OPM_NOTE_ON;
								^h20 - ^h25: CALL SUB_OPM_SET_INSTRUMENT;
								^h30 - ^h3A: CALL SUB_OPM_SET_VOLUME;
								^h40 - ^h46: CALL SUB_OPM_SET_DETUNE;
							ENDSWITCH;
						FI;
						ADD 2 TO GEMINI_COMMAND_POINTER;
					OD;
					
					MCALL BIOS_ENASLT USING ,,^b0100000000000000,RETURN_SLOT;
				FI;
			ELSE
				ADD 1 TO TEMPO_COUNTER;
			FI;
		FI;
		
		CALL OLD_HTIMI_HOOK;
	EXIT;
	
	{--------------------------------
	{-- PROCEDURES AND SUBROUTINES --
	{--------------------------------
		
	SUB_SEARCH_FOR_DETECTION_STRING:
	{------------------------------------------------}
	{-- LOOP THROUGH ALL SLOTS TO FIND GOAL STRING --}
	{-- INPUT: DETECT_SLOT, LOOP_LIMT, GOAL STRING --}
	{-- OUTPUT: N/A                                --}
	{-- CALLS: SUB_DETECT_STRING_SLOT_SEARCH       --}
	{------------------------------------------------}
		IF EXPTBL0 > ^h79 THEN 
			MOVE ^b10000000 TO DETECT_SLOT;
			CALL SUB_DETECT_STRING_SLOT_SEARCH;
			
			MOVE ^b10000100 TO DETECT_SLOT;
			CALL SUB_DETECT_STRING_SLOT_SEARCH;
			
			MOVE ^b10001000 TO DETECT_SLOT;
			CALL SUB_DETECT_STRING_SLOT_SEARCH;
			
			MOVE ^b10001100 TO DETECT_SLOT;
			CALL SUB_DETECT_STRING_SLOT_SEARCH;
		ELSE
			MOVE 0 TO DETECT_SLOT;
			CALL SUB_DETECT_STRING_SLOT_SEARCH;
		FI;
	
		IF EXPTBL1 > ^h79 THEN 
			MOVE ^b10000001 TO DETECT_SLOT;
			CALL SUB_DETECT_STRING_SLOT_SEARCH;
			
			MOVE ^b10000101 TO DETECT_SLOT;
			CALL SUB_DETECT_STRING_SLOT_SEARCH;
			
			MOVE ^b10001001 TO DETECT_SLOT;
			CALL SUB_DETECT_STRING_SLOT_SEARCH;
			
			MOVE ^b10001101 TO DETECT_SLOT;
			CALL SUB_DETECT_STRING_SLOT_SEARCH;
		ELSE
			MOVE 1 TO DETECT_SLOT;
			CALL SUB_DETECT_STRING_SLOT_SEARCH;
		FI;
		
		IF EXPTBL2 > ^h79 THEN 
			MOVE ^b10000010 TO DETECT_SLOT;
			CALL SUB_DETECT_STRING_SLOT_SEARCH;
			
			MOVE ^b10000110 TO DETECT_SLOT;
			CALL SUB_DETECT_STRING_SLOT_SEARCH;
			
			MOVE ^b10001010 TO DETECT_SLOT;
			CALL SUB_DETECT_STRING_SLOT_SEARCH;
			
			MOVE ^b10001110 TO DETECT_SLOT;
			CALL SUB_DETECT_STRING_SLOT_SEARCH;
		ELSE
			MOVE 2 TO DETECT_SLOT;
			CALL SUB_DETECT_STRING_SLOT_SEARCH;
		FI;
	
		IF EXPTBL3 > ^h79 THEN 
			MOVE ^b10000011 TO DETECT_SLOT;
			CALL SUB_DETECT_STRING_SLOT_SEARCH;
			
			MOVE ^b10000111 TO DETECT_SLOT;
			CALL SUB_DETECT_STRING_SLOT_SEARCH;
			
			MOVE ^b10001011 TO DETECT_SLOT;
			CALL SUB_DETECT_STRING_SLOT_SEARCH;
			
			MOVE ^b10001111 TO DETECT_SLOT;
			CALL SUB_DETECT_STRING_SLOT_SEARCH;
		ELSE
			MOVE 3 TO DETECT_SLOT;
			CALL SUB_DETECT_STRING_SLOT_SEARCH;
		FI;
	EXIT;
	
	SUB_DETECT_STRING_SLOT_SEARCH:
	{-------------------------------------}
	{-- SEARCH SLOT FOR GOAL STRING     --}
	{-- INPUT: DETECT_ADDR, DETECT_SLOT --}
	{-- OUTPUT: DETECT_STRING           --}
	{-------------------------------------}
		MOVE 0 TO WHILE_LOOP_COUNTER;
		MOVE #FOUND_STRING TO INTERNAL_DETECT_POINTER;
		MOVE DETECT_ADDR TO EXTERNAL_DETECT_POINTER;
		WHILE WHILE_LOOP_COUNTER < DETECT_STRING_LENGTH;
			MCALL DOS_RDSLT USING ,,EXTERNAL_DETECT_POINTER,DETECT_SLOT GIVING ,,,DETECT_CHAR_IN;
			MOVE DETECT_CHAR_IN TO @INTERNAL_DETECT_POINTER;
			ADD 1 TO INTERNAL_DETECT_POINTER;
			ADD 1 TO EXTERNAL_DETECT_POINTER;
			ADD 1 TO WHILE_LOOP_COUNTER;
		OD;
		ENABLE INTERRUPTS;
		IF FOUND_STRING = GOAL_STRING THEN
			POP DUMMY_WORD;
			POP DUMMY_WORD;
			GOTO LABEL_DEVICE_FOUND;
		FI;
	EXIT;
	
	SUB_OPLL_WRITE:
	{----------------------------------------}
	{-- WRITE A REG/DATA PAIR TO OPLL      --}
	{-- INPUT: OPLL_REG_OUT, OPLL_DATA_OUT --}
	{-- OUTPUT: none                       --}
	{-- CALLS: SUB_WAIT                    --}
	{----------------------------------------}
		{--MCALL WRTOPL USING ,OPLL_DATA_OUT,,OPLL_REG_OUT; 
	{--EXIT;
	
		OUTPUT OPLL_REG_OUT TO OPLL_REG_PORT;
		MOVE 1 TO WHILE_LOOP_COUNTER;
		CALL SUB_WAIT;
		
		OUTPUT OPLL_DATA_OUT TO OPLL_DATA_PORT;
		MOVE 1 TO WHILE_LOOP_COUNTER;
		CALL SUB_WAIT;
	EXIT;
	
	SUB_WAIT:
	{-------------------------------------}
	{-- WAIT APPROX 100 CYCLES PER LOOP --}
	{-- INPUT: WHILE_LOOP_COUNTER       --}
	{-- OUTPUT: WHILE_LOOP_COUNTER = 0  --}
	{-------------------------------------}
		IF WHILE_LOOP_COUNTER > 0 THEN;
			SUBTRACT 1 FROM WHILE_LOOP_COUNTER;
			GOTO SUB_WAIT;
		FI;
	EXIT;
	
	SUB_OPLL_NOTE_OFF:
	{---------------------------------------------------------------}
	{-- ISSUE NOTE OFF COMMAND TO SPECIFIED CHANNEL               --}
	{-- INPUT: GEMINI_COMMAND_DATA                                --}
	{-- OUTPUT: OPLLX_CNTL                                        --}
	{-- USES: OPLL_CNTL, OPLL_DATA_OUT, OPLL_REG_OUT, OPLL_RHYTHM --}
	{-- CALLS: SUB_OPLL_WRITE                                     --}
	{---------------------------------------------------------------}
		IF GEMINI_COMMAND_DATA <> 6 THEN
			MOVE GEMINI_COMMAND_DATA TO OPLL_CNTL;
			MULTIPLY OPLL_CNTL BY 4;
			ADD #OPLL0_CNTL TO OPLL_CNTL;
			AND @OPLL_CNTL WITH ^b11101111
			MOVE @OPLL_CNTL TO OPLL_DATA_OUT;
			MOVE GEMINI_COMMAND_DATA TO OPLL_REG_OUT;
			ADD OPLL_CNTL_BASE TO OPLL_REG_OUT;
			CALL SUB_OPLL_WRITE;
		ELSE
			MOVE ^b00100000 TO OPLL_RHYTHM;
			MOVE OPLL_RHYTHM TO OPLL_DATA_OUT;
			MOVE OPLL_RHYTHM_BASE TO OPLL_REG_OUT;
			CALL SUB_OPLL_WRITE;
		FI;
	EXIT;
	
	SUB_SET_LOOP:
	{------------------------------------------------------------------------------------}
	{-- PROCESS LOOP COMMNAND                                                          --}
	{-- INPUT/OUTPUT: BASICALLY ANYTHING TO DO WITH EXECUTION ORDER AND THE LOOP STACK --}
	{------------------------------------------------------------------------------------}
		SWITCH ON GEMINI_COMMAND_DATA:
			0: MOVE GEMINI_COMMAND_POINTER TO GEMINI_INFINITE_LOOP_POINT;
			1: MOVE GEMINI_INFINITE_LOOP_POINT TO GEMINI_COMMAND_POINTER;
			2: BEGIN
				ADD 2 TO LOOP_STACK_POINTER;
				MOVE GEMINI_COMMAND_POINTER TO @LOOP_STACK_POINTER;
			END;
			3: BEGIN
				IF @LOOP_STACK_POINTER = ^hFFFF THEN
					SUBTRACT 2 FROM LOOP_STACK_POINTER;
				ELSE
					MOVE @LOOP_STACK_POINTER TO GEMINI_COMMAND_POINTER;
					MOVE ^hFFFF TO @LOOP_STACK_POINTER;
				FI;
			END;
		ENDSWITCH;	
	EXIT;
		
	SUB_OPLL_NOTE_ON:
	{--------------------------------------------------------------------------}
	{-- CALCULATE FNUM AND ISSUE NOTE ON FOR GIVEN NOTE IN GIVEN CHANNEL     --}
	{-- INPUT: GEMINI_COMMAND_BYTECODE, GEMINI_COMMAND_DATA                  --}
	{-- OUTPUT: OPLLX_FNUM, OPLLX_CNTL                                       --}
	{-- USES: OPLL_FNUM, OPLL_CNTL, OPLL_DATA_OUT, OPLL_REG_OUT, OPLL_RHYTHM --}
	{-- CALLS: SUB_OPLL_WRITE                                                --}
	{--------------------------------------------------------------------------}
		SUBTRACT ^h10 FROM GEMINI_COMMAND_BYTECODE;
		
		IF GEMINI_COMMAND_BYTECODE <> 6 THEN
			MOVE GEMINI_COMMAND_BYTECODE TO OPLL_CNTL;
			MULTIPLY OPLL_CNTL BY 4;
			MOVE OPLL_CNTL TO OPLL_FNUM;
			MOVE OPLL_CNTL TO OPLL_DETUNE;
			ADD #OPLL0_CNTL TO OPLL_CNTL;
			ADD #OPLL0_FNUM TO OPLL_FNUM;
			ADD #OPLL0_DETUNE TO OPLL_DETUNE;
			DIVIDE GEMINI_COMMAND_DATA BY 12 GIVING OPLL_OCTAVE REMAINDER OPLL_NOTE;
			SWITCH ON OPLL_NOTE:
				0: MOVE OPLL_FNUM_C TO @OPLL_FNUM;
				1: MOVE OPLL_FNUM_CSHARP TO @OPLL_FNUM;
				2: MOVE OPLL_FNUM_D TO @OPLL_FNUM;
				3: MOVE OPLL_FNUM_DSHARP TO @OPLL_FNUM;
				4: MOVE OPLL_FNUM_E TO @OPLL_FNUM;
				5: MOVE OPLL_FNUM_F TO @OPLL_FNUM;
				6: MOVE OPLL_FNUM_FSHARP TO @OPLL_FNUM;
				7: MOVE OPLL_FNUM_G TO @OPLL_FNUM;
				8: MOVE OPLL_FNUM_GSHARP TO @OPLL_FNUM;
				9: MOVE OPLL_FNUM_A TO @OPLL_FNUM;
				10: MOVE OPLL_FNUM_ASHARP TO @OPLL_FNUM;
				11: MOVE OPLL_FNUM_B TO @OPLL_FNUM;
			ENDSWITCH;
			MOVE @OPLL_FNUM TO OPLL_DATA_OUT;
			{--SUBTRACT @OPLL_DETUNE FROM OPLL_DATA_OUT;
			ADD @OPLL_DETUNE TO OPLL_DATA_OUT;
			MOVE OPLL_FNUM_BASE TO OPLL_REG_OUT;
			ADD GEMINI_COMMAND_BYTECODE TO OPLL_REG_OUT;
			CALL SUB_OPLL_WRITE;
			
			ADD OPLL_OCTAVE TO OPLL_OCTAVE;
			AND @OPLL_CNTL WITH ^b11110001;
			OR @OPLL_CNTL WITH OPLL_OCTAVE;
			OR @OPLL_CNTL WITH ^b00010000;
			MOVE @OPLL_CNTL TO OPLL_DATA_OUT;
			MOVE OPLL_CNTL_BASE TO OPLL_REG_OUT;
			ADD GEMINI_COMMAND_BYTECODE TO OPLL_REG_OUT;
			 CALL SUB_OPLL_WRITE;
			
		ELSE
			MOVE GEMINI_COMMAND_DATA TO OPLL_RHYTHM;
			MOVE OPLL_RHYTHM TO OPLL_DATA_OUT;
			MOVE OPLL_RHYTHM_BASE TO OPLL_REG_OUT;
			CALL SUB_OPLL_WRITE;
		FI;
	EXIT;
	
	SUB_OPLL_SET_INSTRUMENT:
	{--------------------------------}
	{-- SET CHANNEL INSTRUMENT     --}
	{--------------------------------}
		SUBTRACT ^h20 FROM GEMINI_COMMAND_BYTECODE;
		MOVE GEMINI_COMMAND_BYTECODE TO OPLL_INSTVOL;
		MULTIPLY OPLL_INSTVOL BY 4;
		ADD #OPLL0_INSTVOL TO OPLL_INSTVOL;
		AND @OPLL_INSTVOL WITH ^h0F;
		MULTIPLY GEMINI_COMMAND_DATA BY ^h10;
		OR @OPLL_INSTVOL WITH GEMINI_COMMAND_DATA;
		
		MOVE GEMINI_COMMAND_BYTECODE TO OPLL_REG_OUT;
		ADD OPLL_INSTVOL_BASE TO OPLL_REG_OUT;
		MOVE @OPLL_INSTVOL TO OPLL_DATA_OUT;
		CALL SUB_OPLL_WRITE;
	EXIT;
	
	SUB_OPLL_SET_VOLUME:
	{--------------------------------}
	{-- SET CHANNEL VOLUME         --}
	{--------------------------------}
		SUBTRACT ^h30 FROM GEMINI_COMMAND_BYTECODE;
		SUBTRACT GEMINI_COMMAND_DATA FROM 15 GIVING GEMINI_COMMAND_DATA
		SWITCH ON GEMINI_COMMAND_BYTECODE:
			0,1,2,3,4,5: BEGIN
				MOVE GEMINI_COMMAND_BYTECODE TO OPLL_INSTVOL;
				MULTIPLY OPLL_INSTVOL BY 4;
				ADD #OPLL0_INSTVOL TO OPLL_INSTVOL;
				AND @OPLL_INSTVOL WITH ^hF0;
				OR @OPLL_INSTVOL WITH GEMINI_COMMAND_DATA;
				
				MOVE GEMINI_COMMAND_BYTECODE TO OPLL_REG_OUT;
				ADD OPLL_INSTVOL_BASE TO OPLL_REG_OUT;
				MOVE @OPLL_INSTVOL TO OPLL_DATA_OUT;
			END;
			6: BEGIN
				MOVE ^h36 TO OPLL_REG_OUT;
				MOVE GEMINI_COMMAND_DATA TO OPLL_BD_VOL;
				MOVE OPLL_BD_VOL TO OPLL_DATA_OUT;
			END;
			7 - 8: BEGIN
				MOVE ^h37 TO OPLL_REG_OUT;
				IF GEMINI_COMMAND_BYTECODE = 7 THEN
					MOVE GEMINI_COMMAND_DATA TO OPLL_HH_VOL;
				ELSE
					MOVE GEMINI_COMMAND_DATA TO OPLL_SD_VOL;
				FI;
				MOVE OPLL_HH_VOL TO OPLL_DATA_OUT;
				MULTIPLY OPLL_DATA_OUT BY ^h10;
				OR OPLL_DATA_OUT WITH OPLL_SD_VOL;
			END;
			9 - 10: BEGIN
				MOVE ^h38 TO OPLL_REG_OUT;
				IF GEMINI_COMMAND_BYTECODE = 9 THEN
					MOVE GEMINI_COMMAND_DATA TO OPLL_TM_VOL;
				ELSE
					MOVE GEMINI_COMMAND_DATA TO OPLL_CY_VOL;
				FI;
				MOVE OPLL_TM_VOL TO OPLL_DATA_OUT;
				MULTIPLY OPLL_DATA_OUT BY ^h10;
				OR OPLL_DATA_OUT WITH OPLL_CY_VOL;
			END;
		ENDSWITCH;
		CALL SUB_OPLL_WRITE;
	EXIT;	
	
	SUB_OPLL_SET_DETUNE:
	{--------------------------------}
	{-- SET CHANNEL DETUNE         --}
	{--------------------------------}
		SUBTRACT ^h40 FROM GEMINI_COMMAND_BYTECODE;
		MOVE GEMINI_COMMAND_BYTECODE TO OPLL_DETUNE;
		MULTIPLY OPLL_DETUNE BY 4;
		ADD #OPLL0_DETUNE TO OPLL_DETUNE;
		MOVE GEMINI_COMMAND_DATA TO @OPLL_DETUNE;
	EXIT;	
	
	SUB_OPM_SET_INSTRUMENT:
	
		MOVE GEMINI_COMMAND_BYTECODE TO OPM_INST_POINTER;
		SUBTRACT ^h20 FROM OPM_INST_POINTER;
		ADD #OPM0_INST TO OPM_INST_POINTER;
		MOVE GEMINI_COMMAND_DATA TO @OPM_INST_POINTER;
	
	
		SWITCH ON GEMINI_COMMAND_DATA:
			^h00: MOVE #OPM_IF_20 TO OPM_INST_POINTER;
			^h01: MOVE #OPM_I0_20 TO OPM_INST_POINTER;
			^h02: MOVE #OPM_I1_20 TO OPM_INST_POINTER;
			^h03: MOVE #OPM_I2_20 TO OPM_INST_POINTER;
			^h04: MOVE #OPM_I3_20 TO OPM_INST_POINTER;
			^h05: MOVE #OPM_I4_20 TO OPM_INST_POINTER;
			^h06: MOVE #OPM_I5_20 TO OPM_INST_POINTER;
			^h07: MOVE #OPM_I6_20 TO OPM_INST_POINTER;
			^h08: MOVE #OPM_I7_20 TO OPM_INST_POINTER;
			^h09: MOVE #OPM_I8_20 TO OPM_INST_POINTER;
			^h0A: MOVE #OPM_I9_20 TO OPM_INST_POINTER;
			^h0B: MOVE #OPM_IA_20 TO OPM_INST_POINTER;
			^h0C: MOVE #OPM_IB_20 TO OPM_INST_POINTER;
			^h0D: MOVE #OPM_IC_20 TO OPM_INST_POINTER;
			^h0E: MOVE #OPM_ID_20 TO OPM_INST_POINTER;
			^h0F: MOVE #OPM_IE_20 TO OPM_INST_POINTER;
			^h10: MOVE #OPM_AF_20 TO OPM_INST_POINTER;
			^h11: MOVE #OPM_A0_20 TO OPM_INST_POINTER;
			^h12: MOVE #OPM_A1_20 TO OPM_INST_POINTER;
			^h13: MOVE #OPM_A2_20 TO OPM_INST_POINTER;
			^h14: MOVE #OPM_A3_20 TO OPM_INST_POINTER;
			^h15: MOVE #OPM_A7_20 TO OPM_INST_POINTER;
			^h16: MOVE #OPM_A5_20 TO OPM_INST_POINTER;
			^h17: MOVE #OPM_A6_20 TO OPM_INST_POINTER;
			^h18: MOVE #OPM_A4_20 TO OPM_INST_POINTER;
			^h19: MOVE #OPM_A8_20 TO OPM_INST_POINTER;
			^h1A: MOVE #OPM_A9_20 TO OPM_INST_POINTER;
			^h1B: MOVE #OPM_AA_20 TO OPM_INST_POINTER;
			^h1C: MOVE #OPM_AB_20 TO OPM_INST_POINTER;
			^h1D: MOVE #OPM_AC_20 TO OPM_INST_POINTER;
			^h1E: MOVE #OPM_AD_20 TO OPM_INST_POINTER;
			^h1F: MOVE #OPM_AE_20 TO OPM_INST_POINTER;
		ENDSWITCH;
		

		
		MOVE GEMINI_COMMAND_BYTECODE TO OPM_REG_OUT;
		
		MOVE @OPM_INST_POINTER TO OPM_DATA_OUT;
		
		CALL SUB_OPM_WRITE;
		
		ADD ^h20 TO OPM_REG_OUT;
		ADD ^h01 TO OPM_INST_POINTER;
		
		WHILE OPM_REG_OUT > ^h3F
			MOVE @OPM_INST_POINTER TO OPM_DATA_OUT;
			
			CALL SUB_OPM_WRITE;
			
			ADD 1 TO OPM_INST_POINTER;
			ADD 8 TO OPM_REG_OUT;
			
		OD;
		
		MOVE GEMINI_COMMAND_BYTECODE TO OPM_INST_POINTER;
		SUBTRACT ^h20 FROM OPM_INST_POINTER;
		ADD #OPM0_VOL TO OPM_INST_POINTER;
		
		ADD ^h10 TO GEMINI_COMMAND_BYTECODE;
		MOVE @OPM_INST_POINTER TO GEMINI_COMMAND_DATA;
		CALL SUB_OPM_SET_VOLUME; 
		
	EXIT;
	
	SUB_OPM_NOTE_ON:
		
		IF GEMINI_COMMAND_BYTECODE = ^h16 THEN			
			AND GEMINI_COMMAND_DATA WITH ^b00010000 GIVING OPM_DATA_OUT;
			IF OPM_DATA_OUT = ^b00010000 THEN
				MOVE ^h2E TO OPM_REG_OUT;
				MOVE ^h07 TO OPM_DATA_OUT;
				CALL SUB_OPM_WRITE;
				
				MOVE ^h6E TO OPM_REG_OUT;
				SWITCH ON OPM_BD_VOL:
					^hF: MOVE ^h00 TO OPM_DATA_OUT;
					^hE: MOVE ^h04 TO OPM_DATA_OUT;
					^hD: MOVE ^h08 TO OPM_DATA_OUT;
					^hC: MOVE ^h0C TO OPM_DATA_OUT;
					^hB: MOVE ^h10 TO OPM_DATA_OUT;
					^hA: MOVE ^h14 TO OPM_DATA_OUT;
					^h9: MOVE ^h18 TO OPM_DATA_OUT;
					^h8: MOVE ^h1C TO OPM_DATA_OUT;
					^h7: MOVE ^h20 TO OPM_DATA_OUT;
					^h6: MOVE ^h24 TO OPM_DATA_OUT;
					^h5: MOVE ^h28 TO OPM_DATA_OUT;
					^h4: MOVE ^h2C TO OPM_DATA_OUT;
					^h3: MOVE ^h30 TO OPM_DATA_OUT;
					^h2: MOVE ^h34 TO OPM_DATA_OUT;
					^h1: MOVE ^h38 TO OPM_DATA_OUT;
					^h0: MOVE ^hFF TO OPM_DATA_OUT;
				ENDSWITCH;
				ADD 7 TO OPM_DATA_OUT; {--DEBUG
				CALL SUB_OPM_WRITE;
				
				MOVE OPM_CNTL_REG TO OPM_REG_OUT; 
				MOVE ^b01111110 TO OPM_DATA_OUT;
				CALL SUB_OPM_WRITE;
			ELSE
				AND GEMINI_COMMAND_DATA WITH ^b00000100 GIVING OPM_DATA_OUT;
				IF OPM_DATA_OUT = ^b00000100 THEN
					MOVE ^h2E TO OPM_REG_OUT;
					MOVE ^h20 TO OPM_DATA_OUT;
					CALL SUB_OPM_WRITE;
				
					MOVE ^h6E TO OPM_REG_OUT;
					SWITCH ON OPM_TM_VOL:
						^hF: MOVE ^h08 TO OPM_DATA_OUT;
						^hE: MOVE ^h0C TO OPM_DATA_OUT;
						^hD: MOVE ^h10 TO OPM_DATA_OUT;
						^hC: MOVE ^h14 TO OPM_DATA_OUT;
						^hB: MOVE ^h18 TO OPM_DATA_OUT;
						^hA: MOVE ^h1C TO OPM_DATA_OUT;
						^h9: MOVE ^h20 TO OPM_DATA_OUT;
						^h8: MOVE ^h24 TO OPM_DATA_OUT;
						^h7: MOVE ^h28 TO OPM_DATA_OUT;
						^h6: MOVE ^h2C TO OPM_DATA_OUT;
						^h5: MOVE ^h30 TO OPM_DATA_OUT;
						^h4: MOVE ^h34 TO OPM_DATA_OUT;
						^h3: MOVE ^h38 TO OPM_DATA_OUT;
						^h2: MOVE ^h3C TO OPM_DATA_OUT;
						^h1: MOVE ^h40 TO OPM_DATA_OUT;
						^h0: MOVE ^hFF TO OPM_DATA_OUT;
					ENDSWITCH;
					SUBTRACT 7 FROM OPM_DATA_OUT; {--DEBUG
					CALL SUB_OPM_WRITE;
					
				
				
					MOVE OPM_CNTL_REG TO OPM_REG_OUT; 
					MOVE ^b01111110 TO OPM_DATA_OUT;
					CALL SUB_OPM_WRITE;
				FI;	
			FI;

			AND GEMINI_COMMAND_DATA WITH ^b00000010 GIVING OPM_DATA_OUT;
			IF OPM_DATA_OUT = ^b00000010 THEN
				{-- CRASH
				MOVE ^h0F TO OPM_REG_OUT;
				MOVE ^b10011111 TO OPM_DATA_OUT;
				CALL SUB_OPM_WRITE;
					
				MOVE ^hDF TO OPM_REG_OUT;
				MOVE ^h12 TO OPM_DATA_OUT;
				CALL SUB_OPM_WRITE;
				
				MOVE ^h7F TO OPM_REG_OUT;
				SWITCH ON OPM_CY_VOL:
					^hF: MOVE ^h30 TO OPM_DATA_OUT;
					^hE: MOVE ^h34 TO OPM_DATA_OUT;
					^hD: MOVE ^h38 TO OPM_DATA_OUT;
					^hC: MOVE ^h3C TO OPM_DATA_OUT;
					^hB: MOVE ^h40 TO OPM_DATA_OUT;
					^hA: MOVE ^h44 TO OPM_DATA_OUT;
					^h9: MOVE ^h48 TO OPM_DATA_OUT;
					^h8: MOVE ^h4C TO OPM_DATA_OUT;
					^h7: MOVE ^h50 TO OPM_DATA_OUT;
					^h6: MOVE ^h54 TO OPM_DATA_OUT;
					^h5: MOVE ^h58 TO OPM_DATA_OUT;
					^h4: MOVE ^h5C TO OPM_DATA_OUT;
					^h3: MOVE ^h60 TO OPM_DATA_OUT;
					^h2: MOVE ^h64 TO OPM_DATA_OUT;
					^h1: MOVE ^h68 TO OPM_DATA_OUT;
					^h0: MOVE ^hFF TO OPM_DATA_OUT;
				ENDSWITCH;
				ADD 5 TO OPM_DATA_OUT; {--DEBUG
				CALL SUB_OPM_WRITE;
				
				MOVE OPM_CNTL_REG TO OPM_REG_OUT; 
				MOVE ^b01111111 TO OPM_DATA_OUT;
				CALL SUB_OPM_WRITE;
			ELSE
				AND GEMINI_COMMAND_DATA WITH ^b00001000 GIVING OPM_DATA_OUT;
				IF OPM_DATA_OUT = ^b00001000 THEN
					{--SNARE
					MOVE ^h0F TO OPM_REG_OUT;
					MOVE ^h90 TO OPM_DATA_OUT;
					CALL SUB_OPM_WRITE;
					
					MOVE ^hDF TO OPM_REG_OUT;
					MOVE ^h14 TO OPM_DATA_OUT;
					CALL SUB_OPM_WRITE;
				
					MOVE ^h7F TO OPM_REG_OUT;
					SWITCH ON OPM_SD_VOL:
						^hF: MOVE ^h30 TO OPM_DATA_OUT;
						^hE: MOVE ^h34 TO OPM_DATA_OUT;
						^hD: MOVE ^h38 TO OPM_DATA_OUT;
						^hC: MOVE ^h3C TO OPM_DATA_OUT;
						^hB: MOVE ^h40 TO OPM_DATA_OUT;
						^hA: MOVE ^h44 TO OPM_DATA_OUT;
						^h9: MOVE ^h48 TO OPM_DATA_OUT;
						^h8: MOVE ^h4C TO OPM_DATA_OUT;
						^h7: MOVE ^h50 TO OPM_DATA_OUT;
						^h6: MOVE ^h54 TO OPM_DATA_OUT;
						^h5: MOVE ^h58 TO OPM_DATA_OUT;
						^h4: MOVE ^h5C TO OPM_DATA_OUT;
						^h3: MOVE ^h60 TO OPM_DATA_OUT;
						^h2: MOVE ^h64 TO OPM_DATA_OUT;
						^h1: MOVE ^h68 TO OPM_DATA_OUT;
						^h0: MOVE ^hFF TO OPM_DATA_OUT;
					ENDSWITCH;
					ADD 5 TO OPM_DATA_OUT; {--DEBUG
					CALL SUB_OPM_WRITE;
				
					MOVE OPM_CNTL_REG TO OPM_REG_OUT; 
					MOVE ^b01111111 TO OPM_DATA_OUT;
					CALL SUB_OPM_WRITE;
				ELSE
					AND GEMINI_COMMAND_DATA WITH ^b00000001 GIVING OPM_DATA_OUT;
					IF OPM_DATA_OUT = ^b00000001 THEN
						{--HAT 
						MOVE ^h0F TO OPM_REG_OUT;
						MOVE ^b10011111 TO OPM_DATA_OUT;
						CALL SUB_OPM_WRITE;
					
						MOVE ^hDF TO OPM_REG_OUT;
						MOVE ^h17 TO OPM_DATA_OUT;
						CALL SUB_OPM_WRITE;
				
						MOVE ^h7F TO OPM_REG_OUT;
						SWITCH ON OPM_HH_VOL:
							^hF: MOVE ^h30 TO OPM_DATA_OUT;
							^hE: MOVE ^h34 TO OPM_DATA_OUT;
							^hD: MOVE ^h38 TO OPM_DATA_OUT;
							^hC: MOVE ^h3C TO OPM_DATA_OUT;
							^hB: MOVE ^h40 TO OPM_DATA_OUT;
							^hA: MOVE ^h44 TO OPM_DATA_OUT;
							^h9: MOVE ^h48 TO OPM_DATA_OUT;
							^h8: MOVE ^h4C TO OPM_DATA_OUT;
							^h7: MOVE ^h50 TO OPM_DATA_OUT;
							^h6: MOVE ^h54 TO OPM_DATA_OUT;
							^h5: MOVE ^h58 TO OPM_DATA_OUT;
							^h4: MOVE ^h5C TO OPM_DATA_OUT;
							^h3: MOVE ^h60 TO OPM_DATA_OUT;
							^h2: MOVE ^h64 TO OPM_DATA_OUT;
							^h1: MOVE ^h68 TO OPM_DATA_OUT;
							^h0: MOVE ^hFF TO OPM_DATA_OUT;
						ENDSWITCH;
						ADD 5 TO OPM_DATA_OUT; {--DEBUG
						CALL SUB_OPM_WRITE;
				
						MOVE OPM_CNTL_REG TO OPM_REG_OUT; 
						MOVE ^b01111111 TO OPM_DATA_OUT;
						CALL SUB_OPM_WRITE;
					
					FI;
				FI;
			FI;
			EXIT;
		FI;
		
		
		MOVE ^h18 TO OPM_REG_OUT;
		ADD GEMINI_COMMAND_BYTECODE TO OPM_REG_OUT;
		
		DIVIDE GEMINI_COMMAND_DATA BY 12 GIVING OPM_OCTAVE REMAINDER OPM_NOTE;
		SWITCH ON OPM_NOTE:
			0: BEGIN
				MOVE OPM_NOTE_C TO OPM_DATA_OUT;
				SUBTRACT 1 FROM OPM_OCTAVE;
			END;
			1: MOVE OPM_NOTE_CSHARP TO OPM_DATA_OUT;
			2: MOVE OPM_NOTE_D TO OPM_DATA_OUT;
			3: MOVE OPM_NOTE_DSHARP TO OPM_DATA_OUT;
			4: MOVE OPM_NOTE_E TO OPM_DATA_OUT;
			5: MOVE OPM_NOTE_F TO OPM_DATA_OUT;
			6: MOVE OPM_NOTE_FSHARP TO OPM_DATA_OUT;
			7: MOVE OPM_NOTE_G TO OPM_DATA_OUT;
			8: MOVE OPM_NOTE_GSHARP TO OPM_DATA_OUT;
			9: MOVE OPM_NOTE_A TO OPM_DATA_OUT;
			10: MOVE OPM_NOTE_ASHARP TO OPM_DATA_OUT;
			11: MOVE OPM_NOTE_B TO OPM_DATA_OUT;
		ENDSWITCH;
		
		SUBTRACT 1 FROM OPM_OCTAVE;
		MULTIPLY OPM_OCTAVE BY ^h10;
		ADD OPM_OCTAVE TO OPM_DATA_OUT;
		
		CALL SUB_OPM_WRITE;
		

		MOVE OPM_CNTL_REG TO OPM_REG_OUT; 
		
		MOVE GEMINI_COMMAND_BYTECODE TO OPM_DATA_OUT;
		SUBTRACT ^h10 FROM OPM_DATA_OUT;
		ADD ^b01111000 TO OPM_DATA_OUT;
		CALL SUB_OPM_WRITE;
	
	EXIT;
	
	SUB_OPM_NOTE_OFF:
		MOVE OPM_CNTL_REG TO OPM_REG_OUT; 
		
		MOVE GEMINI_COMMAND_DATA TO OPM_DATA_OUT;
		CALL SUB_OPM_WRITE;
		
		IF GEMINI_COMMAND_DATA = ^h06 THEN
			ADD 1 TO OPM_DATA_OUT;
			CALL SUB_OPM_WRITE;
		FI;
	EXIT;
	
	SUB_OPM_SET_DETUNE:
		MOVE GEMINI_COMMAND_BYTECODE TO OPM_REG_OUT;
		SUBTRACT ^h10 FROM OPM_REG_OUT;
		
		MOVE GEMINI_COMMAND_DATA TO OPM_DATA_OUT;
		
		{--TODO THIS IS A DUMB HACK
		MULTIPLY OPM_DATA_OUT BY ^h30;
		
		
		CALL SUB_OPM_WRITE;
		
		
	EXIT;
	
	SUB_OPM_SET_VOLUME:
		IF GEMINI_COMMAND_BYTECODE > ^h35 THEN
			SWITCH ON GEMINI_COMMAND_BYTECODE:
				^h36: MOVE GEMINI_COMMAND_DATA TO OPM_BD_VOL;
				^h37: MOVE GEMINI_COMMAND_DATA TO OPM_HH_VOL;
				^h38: MOVE GEMINI_COMMAND_DATA TO OPM_SD_VOL;
				^h39: MOVE GEMINI_COMMAND_DATA TO OPM_TM_VOL;
				^h3A: MOVE GEMINI_COMMAND_DATA TO OPM_CY_VOL;
			ENDSWITCH;
			EXIT;
		FI;
		
		SUBTRACT ^h30 FROM GEMINI_COMMAND_BYTECODE;
		MOVE GEMINI_COMMAND_BYTECODE TO OPM_INST_POINTER;
		ADD #OPM0_VOL TO OPM_INST_POINTER;
		MOVE GEMINI_COMMAND_DATA TO @OPM_INST_POINTER;
		
		
		MOVE GEMINI_COMMAND_BYTECODE TO OPM_INST_POINTER;
		ADD #OPM0_INST TO OPM_INST_POINTER;
		
		SWITCH ON GEMINI_COMMAND_DATA:
			^hF: MOVE ^h10 TO OPM_DATA_OUT;
			^hE: MOVE ^h14 TO OPM_DATA_OUT;
			^hD: MOVE ^h18 TO OPM_DATA_OUT;
			^hC: MOVE ^h1C TO OPM_DATA_OUT;
			^hB: MOVE ^h20 TO OPM_DATA_OUT;
			^hA: MOVE ^h24 TO OPM_DATA_OUT;
			^h9: MOVE ^h28 TO OPM_DATA_OUT;
			^h8: MOVE ^h2C TO OPM_DATA_OUT;
			^h7: MOVE ^h30 TO OPM_DATA_OUT;
			^h6: MOVE ^h34 TO OPM_DATA_OUT;
			^h5: MOVE ^h38 TO OPM_DATA_OUT;
			^h4: MOVE ^h3C TO OPM_DATA_OUT;
			^h3: MOVE ^h40 TO OPM_DATA_OUT;
			^h2: MOVE ^h44 TO OPM_DATA_OUT;
			^h1: MOVE ^h48 TO OPM_DATA_OUT;
			^h0: MOVE ^hFF TO OPM_DATA_OUT;
		ENDSWITCH;
		
		{-- REMEMBER THESE ARE *ATTENUATION VALUES* - SUBTRACTION FOR LOUDER AND ADDITION FOR QUIETER!!!
		SWITCH ON @OPM_INST_POINTER:
			^h00:	SUBTRACT ^h04 FROM OPM_DATA_OUT;
			^h01:	NULL;
			^h02:	NULL;
			^h03:	NULL;
			^h04:	NULL;
			^h05:	NULL;
			^h06:	NULL;
			^h07: 	SUBTRACT ^h04 FROM OPM_DATA_OUT;
			^h08:	NULL;
			^h09:	SUBTRACT ^h04 FROM OPM_DATA_OUT;;
			^h0A:	NULL;
			^h0B:	NULL;
			^h0C:	SUBTRACT ^h08 FROM OPM_DATA_OUT;
			^h0D:	NULL;
			^h0E:	NULL;
			^h10:	NULL;
			^h11:	NULL;
			^h12:	NULL;
			^h13:	NULL;
			^h14:	NULL;
			^h15:	ADD ^h04 TO OPM_DATA_OUT;
			^h16:	ADD ^h04 TO OPM_DATA_OUT;
			^h17:	SUBTRACT ^h04 FROM OPM_DATA_OUT;
			^h18:	NULL;
			^h19:	ADD ^h04 TO OPM_DATA_OUT;
			^h1A:	NULL;
			^h1B:	NULL;
			^h1C:	SUBTRACT ^h02 FROM OPM_DATA_OUT;
			^h1D:	NULL;
			^h1E:	NULL;
			^h1F:	ADD ^h04 TO OPM_DATA_OUT;
		ENDSWITCH;
		
		
		MOVE GEMINI_COMMAND_BYTECODE TO OPM_REG_OUT;
		ADD OPM_OP4VOL_BASE TO OPM_REG_OUT;
		CALL SUB_OPM_WRITE;
		
		SWITCH ON @OPM_INST_POINTER:
			^h00 - ^h09, ^h0B - ^h10, ^h13, ^h15, ^h16, ^h18, ^h19, ^h1A, ^h1C, ^h1F: BEGIN
				MOVE GEMINI_COMMAND_BYTECODE TO OPM_REG_OUT;
				ADD OPM_OP3VOL_BASE TO OPM_REG_OUT;
				CALL SUB_OPM_WRITE;			
			END;
		ENDSWITCH;
		
		SWITCH ON @OPM_INST_POINTER:
			^h04, ^h15, ^h19, ^h1A, ^h1F: BEGIN
				MOVE GEMINI_COMMAND_BYTECODE TO OPM_REG_OUT;
				ADD OPM_OP2VOL_BASE TO OPM_REG_OUT;
				CALL SUB_OPM_WRITE;			
			END;
		ENDSWITCH;
		
	EXIT;
	
	SUB_OPM_WRITE:	
		WHILE OPM_STATUS_ADDR > ^b01111111 DO
		OD;
		
		MOVE OPM_REG_OUT TO OPM_REG_ADDR;
		
		WHILE OPM_STATUS_ADDR > ^b01111111 DO
		OD;
		
		MOVE OPM_DATA_OUT TO OPM_DATA_ADDR;
	EXIT;
	
	SUB_PAUSE_TOGGLE:
		IF GEMINI_NOT_PAUSED = 1 THEN
			CALL SUB_ALL_NOTE_OFF;
			MOVE 0 TO GEMINI_NOT_PAUSED;
		ELSE 
			MOVE 1 TO GEMINI_NOT_PAUSED;
		FI;
	EXIT;
	
	SUB_ALL_NOTE_OFF:
		MCALL SUB_GETSLT USING ,,^h7F00 GIVING ,,,RETURN_SLOT;
		MCALL BIOS_ENASLT USING ,,^b0100000000000000,DETECT_SLOT;
	
		IF OPM_NOT_FOUND <> 0 THEN
			MOVE #OPLL0_CNTL TO OPLL_CNTL;
			MOVE OPLL_CNTL_BASE TO OPLL_REG_OUT;
			WHILE OPLL_CNTL < #OPLL5_INSTVOL DO
				AND @OPLL_CNTL WITH ^b11101111
				MOVE @OPLL_CNTL TO OPLL_DATA_OUT;
				CALL SUB_OPLL_WRITE;	
				ADD 1 TO OPLL_REG_OUT;
				ADD 4 to OPLL_CNTL;
			OD;
			
			MOVE ^b00100000 TO OPLL_RHYTHM;
			MOVE OPLL_RHYTHM TO OPLL_DATA_OUT;
			MOVE OPLL_RHYTHM_BASE TO OPLL_REG_OUT;
			CALL SUB_OPLL_WRITE;
		ELSE
			
		
			MOVE OPM_CNTL_REG TO OPM_REG_OUT; 
			MOVE 0 TO OPM_DATA_OUT;
			WHILE OPM_DATA_OUT < 8 DO
				CALL SUB_OPM_WRITE;
				ADD 1 TO OPM_DATA_OUT;
			OD;
			
		FI;
		
		MCALL BIOS_ENASLT USING ,,^b0100000000000000,RETURN_SLOT;
	EXIT;
END;
