	[number match level address z80 print disk full map]
BEGIN
	SET ASCII_A = ^h41
	SET ASCII_B = ^h42
	SET ASCII_C = ^h43
	SET ASCII_D = ^h44
	SET ASCII_E = ^h45
	SET ASCII_F = ^h46
	SET ASCII_G = ^h47
	SET ASCII_H = ^h48
	SET ASCII_I = ^h49
	SET ASCII_J = ^h4A
	SET ASCII_K = ^h4B
	SET ASCII_L = ^h4C
	SET ASCII_M = ^h4D
	SET ASCII_N = ^h4E
	SET ASCII_O = ^h4F
	SET ASCII_P = ^h50
	SET ASCII_Q = ^h51
	SET ASCII_R = ^h52
	SET ASCII_S = ^h53
	SET ASCII_T = ^h54
	SET ASCII_U = ^h55
	SET ASCII_V = ^h56
	SET ASCII_W = ^h57
	SET ASCII_X = ^h58
	SET ASCII_Y = ^h59
	SET ASCII_Z = ^h5A
	SET ASCII_0 = ^h30
	SET ASCII_1 = ^h31
	SET ASCII_2 = ^h32
	SET ASCII_3 = ^h33
	SET ASCII_4 = ^h34
	SET ASCII_5 = ^h35
	SET ASCII_6 = ^h36
	SET ASCII_7 = ^h37
	SET ASCII_8 = ^h38
	SET ASCII_9 = ^h39
	
	STRING DEBUG_STR 5;
	POINTER TO BYTE DEBUG_POINTER VALUE #DEBUG_STR;
	
	BYTE INCHAR;
	STRING INBUFFER 512;
	FILE INFILE DISK FILE1 TEXT RECORD INCHAR BUFFER INBUFFER;
	
	BYTE OUTCHAR;
	STRING OUTBUFFER 512;
	FILE OUTFILE DISK TEXT RECORD OUTCHAR BUFFER OUTBUFFER VALUE "SONG.BIN";
	
	BYTE LASTCHAR;
	
	OPEN INFILE INPUT;
	OPEN OUTFILE OUTPUT;
	READ INFILE;
	WHILE INCHAR <> ^h1A DO
		DISPLAY "PARSING CHARACTER"
		SWITCH ON INCHAR:
			ASCII_D: CALL SUB_PARSE_DETUNE;
			ASCII_E: CALL SUB_PARSE_END;
			ASCII_I: CALL SUB_PARSE_INSTRUMENT;
			ASCII_K, ASCII_O: CALL SUB_PARSE_KEY;
			ASCII_L: CALL SUB_PARSE_LOOP;
			ASCII_R: CALL SUB_PARSE_REPEAT;
			ASCII_T: CALL SUB_PARSE_TEMPO;
			ASCII_V: CALL SUB_PARSE_VOL;
			ASCII_W: CALL SUB_PARSE_WAIT;
			^h2A: CALL SUB_SKIP_LINE;
		ENDSWITCH;
		READ INFILE;
	OD;
	CLOSE INFILE;
	CLOSE OUTFILE;
	DISPLAY "WARNING: NO END COMMAND SPECIFIED";
	DISPLAY "COMPILE SUCCESS";
	GOTO END;
	
	SUB_PARSE_END:
		MOVE ^h0F TO OUTCHAR;
		WRITE OUTFILE;
		
		MOVE ^hFF TO OUTCHAR;
		WRITE OUTFILE;
	
		CLOSE INFILE;
		CLOSE OUTFILE;
		DISPLAY "COMPILE SUCCESS";
		GOTO END;
	EXIT;
	
	SUB_PARSE_DETUNE:
		DISPLAY "PARSING DETUNE";
		MOVE ^h40 TO OUTCHAR;
		
		CALL SUB_SKIP_WORD;
		
		CALL SUB_PARSE_NIBBLE;
		ADD LASTCHAR TO OUTCHAR;
		WRITE OUTFILE;
		
		CALL SUB_PARSE_NIBBLE;
		MOVE LASTCHAR TO OUTCHAR;
		WRITE OUTFILE;
		
	EXIT;
	
	SUB_PARSE_INSTRUMENT:
		DISPLAY "PARSING INSTRUMENT";
		MOVE ^h20 TO OUTCHAR;
		
		CALL SUB_SKIP_WORD;
		
		CALL SUB_PARSE_NIBBLE;
		ADD LASTCHAR TO OUTCHAR;
		WRITE OUTFILE;
		
		CALL SUB_PARSE_NIBBLE;
		MOVE LASTCHAR TO OUTCHAR;
		WRITE OUTFILE;
		
	EXIT;
	
	SUB_PARSE_KEY:
		DISPLAY "PARSING KEY";
		WHILE INCHAR <> ^h0A DO
			IF INCHAR = ASCII_N THEN
				DISPLAY "PARSING KEY ON";
				MOVE ^h10 TO OUTCHAR;
				
				CALL SUB_SKIP_WORD;
				
				CALL SUB_PARSE_NIBBLE;
				IF LASTCHAR = ^h06 THEN
					{-- TODO drum processing here
				ELSE
					ADD LASTCHAR TO OUTCHAR;
					WRITE OUTFILE;
					
					WHILE INCHAR <> ^h0A DO
						MOVE INCHAR TO @DEBUG_POINTER;
						DISPLAY DEBUG_STR;
						SWITCH ON INCHAR
							ASCII_A - ASCII_G: GOTO LABEL_NOTE_FOUND; 
							ELSE NULL
						ENDSWITCH;
						READ INFILE;
					OD;
					
					DISPLAY "ERROR: EXPECTED NOTE, GOT NEWLINE";
					GOTO QUIT;
					
					LABEL_NOTE_FOUND:
						SWITCH ON INCHAR
							ASCII_C: MOVE ^h00 TO OUTCHAR;
							ASCII_D: MOVE ^h02 TO OUTCHAR;
							ASCII_E: MOVE ^h04 TO OUTCHAR;
							ASCII_F: MOVE ^h05 TO OUTCHAR;
							ASCII_G: MOVE ^h07 TO OUTCHAR;
							ASCII_A: MOVE ^h09 TO OUTCHAR;
							ASCII_B: MOVE ^h0B TO OUTCHAR;
						ENDSWITCH;
						
						READ INFILE;
						
						IF INCHAR = ^h2B THEN
							ADD 1 TO OUTCHAR;
							READ INFILE;
						FI;
						
						IF INCHAR = ^h2D THEN
							SUBTRACT 1 FROM OUTCHAR;
							READ INFILE;
						FI;
						
						SWITCH ON INCHAR:
							ASCII_0: MOVE ^h00 TO LASTCHAR;
							ASCII_1: MOVE ^h01 TO LASTCHAR;
							ASCII_2: MOVE ^h02 TO LASTCHAR;
							ASCII_3: MOVE ^h03 TO LASTCHAR;
							ASCII_4: MOVE ^h04 TO LASTCHAR;
							ASCII_5: MOVE ^h05 TO LASTCHAR;
							ASCII_6: MOVE ^h06 TO LASTCHAR;
							ASCII_7: MOVE ^h07 TO LASTCHAR;
							ASCII_8: MOVE ^h08 TO LASTCHAR;
							ASCII_9: MOVE ^h09 TO LASTCHAR;
							ASCII_A: MOVE ^h0A TO LASTCHAR;
							ASCII_B: MOVE ^h0B TO LASTCHAR;
							ASCII_C: MOVE ^h0C TO LASTCHAR;
							ASCII_D: MOVE ^h0D TO LASTCHAR;
							ASCII_E: MOVE ^h0E TO LASTCHAR;
							ASCII_F: MOVE ^hFF TO LASTCHAR;
							ELSE NULL;
						ENDSWITCH;
						
						IF INCHAR = ^hFF THEN
							DISPLAY "ERROR: EXPECTED NUMBER, GOT, UH, SOMETHING ELSE";
							GOTO QUIT;
						FI;
						
						MULTIPLY LASTCHAR BY 12;
						ADD LASTCHAR TO OUTCHAR;
						WRITE OUTFILE;
						
						CALL SUB_SKIP_LINE;
					EXIT;
				FI;
				
				{-- TODO CALCULATE AND EMIT NOTE VALUE FOR KEY ON
				EXIT;
			FI;
			
			IF INCHAR = ASCII_F THEN
				DISPLAY "PARSING KEY OFF";
				MOVE ^h02 TO OUTCHAR;
				WRITE OUTFILE;
				
				CALL SUB_SKIP_WORD;
				
				CALL SUB_PARSE_NIBBLE;
				MOVE LASTCHAR TO OUTCHAR;
				WRITE OUTFILE;
				EXIT;
			FI;
			
			READ INFILE;
		OD;
		DISPLAY "ERROR: EXPECTED 'ON' OR 'OFF', GOT NEWLINE";
		GOTO QUIT;
	EXIT;
	
	SUB_PARSE_LOOP:
		DISPLAY "PARSING LOOP";
		MOVE ^h04 TO OUTCHAR;
		WRITE OUTFILE;
		
		CALL SUB_SKIP_WORD;
		
		WHILE INCHAR <> ^h0A DO
			IF INCHAR = ASCII_S THEN
				MOVE ^h00 TO OUTCHAR;
				WRITE OUTFILE;
				CALL SUB_SKIP_LINE;
				EXIT;
			FI;
			
			IF INCHAR = ASCII_N THEN
				MOVE ^h01 TO OUTCHAR;
				WRITE OUTFILE;
				CALL SUB_SKIP_LINE;
				EXIT;
			FI;
			READ INFILE;
		OD;
		DISPLAY "ERROR: EXPECTED 'START' OR 'END', GOT NEWLINE";
		GOTO QUIT;
	EXIT;
	
	SUB_PARSE_REPEAT:
		DISPLAY "PARSING REPEAT";
		MOVE ^h04 TO OUTCHAR;
		WRITE OUTFILE;
		
		CALL SUB_SKIP_WORD;
		
		WHILE INCHAR <> ^h0A DO
			IF INCHAR = ASCII_S THEN
				MOVE ^h02 TO OUTCHAR;
				WRITE OUTFILE;
				CALL SUB_SKIP_LINE;
				EXIT;
			FI;
			
			IF INCHAR = ASCII_N THEN
				MOVE ^h03 TO OUTCHAR;
				WRITE OUTFILE;
				CALL SUB_SKIP_LINE;
				EXIT;
			FI;
			READ INFILE;
		OD;
		DISPLAY "ERROR: EXPECTED 'START' OR 'END', GOT NEWLINE";
		GOTO QUIT;
	EXIT;
	
	SUB_PARSE_TEMPO:
		DISPLAY "PARSING TEMPO";
		MOVE ^h01 TO OUTCHAR;
		WRITE OUTFILE;
		
		CALL SUB_SKIP_WORD;
		
		CALL SUB_PARSE_BYTE;
		MOVE LASTCHAR TO OUTCHAR;
		WRITE OUTFILE;
		
		CALL SUB_SKIP_LINE;
	EXIT;
	
	SUB_PARSE_VOL:
		DISPLAY "PARSING VOL";
		MOVE ^h30 TO OUTCHAR;
		
		CALL SUB_SKIP_WORD;
		
		CALL SUB_PARSE_NIBBLE;
		ADD LASTCHAR TO OUTCHAR;
		WRITE OUTFILE;
		
		CALL SUB_PARSE_NIBBLE;
		MOVE LASTCHAR TO OUTCHAR;
		WRITE OUTFILE;
		
		CALL SUB_SKIP_LINE;
	EXIT;
	
	SUB_PARSE_WAIT:
		DISPLAY "PARSING WAIT";
		MOVE ^h03 TO OUTCHAR;
		WRITE OUTFILE;
		
		CALL SUB_SKIP_WORD;
		
		CALL SUB_PARSE_BYTE;
		MOVE LASTCHAR TO OUTCHAR;
		WRITE OUTFILE;
		
		CALL SUB_SKIP_LINE;
	EXIT;
	
	SUB_SKIP_LINE:
		DISPLAY "SKIPPING TO END OF LINE";
		WHILE INCHAR <> ^h0A DO
			READ INFILE;
		OD;
	EXIT;
	
	SUB_SKIP_WORD:
		DISPLAY "SKIPPING TO NEXT WORD";
		WHILE INCHAR <> ^h20 DO
			READ INFILE;
		OD;
	EXIT;
	
	SUB_PARSE_BYTE:
		DISPLAY "PARSING BYTE";
		CALL SUB_PARSE_NIBBLE;
		READ INFILE;
		SWITCH ON INCHAR:
			ASCII_0 - ASCII_9: NULL;
			ASCII_A - ASCII_F: NULL;
			ELSE EXIT;
		ENDSWITCH;
		MULTIPLY LASTCHAR BY ^h10;
		ADD INCHAR TO LASTCHAR;
	EXIT;
	
	SUB_PARSE_NIBBLE:
		DISPLAY "PARSING NIBBLE";
		
		
		MOVE ^h10 TO LASTCHAR;
		READ INFILE;
		WHILE INCHAR <> ^h0A DO
			MOVE INCHAR TO @DEBUG_POINTER;
			DISPLAY DEBUG_STR;
		
			SWITCH ON INCHAR:
				ASCII_0: MOVE ^h00 TO LASTCHAR;
				ASCII_1: MOVE ^h01 TO LASTCHAR;
				ASCII_2: MOVE ^h02 TO LASTCHAR;
				ASCII_3: MOVE ^h03 TO LASTCHAR;
				ASCII_4: MOVE ^h04 TO LASTCHAR;
				ASCII_5: MOVE ^h05 TO LASTCHAR;
				ASCII_6: MOVE ^h06 TO LASTCHAR;
				ASCII_7: MOVE ^h07 TO LASTCHAR;
				ASCII_8: MOVE ^h08 TO LASTCHAR;
				ASCII_9: MOVE ^h09 TO LASTCHAR;
				ASCII_A: MOVE ^h0A TO LASTCHAR;
				ASCII_B: MOVE ^h0B TO LASTCHAR;
				ASCII_C: MOVE ^h0C TO LASTCHAR;
				ASCII_D: MOVE ^h0D TO LASTCHAR;
				ASCII_E: MOVE ^h0E TO LASTCHAR;
				ASCII_F: MOVE ^h0F TO LASTCHAR;
				ELSE NULL;
			ENDSWITCH;
			IF LASTCHAR < ^h10 THEN
				EXIT;
			FI;
			READ INFILE;
		OD;
		DISPLAY "ERROR: NUMBER EXPECTED, GOT NEWLINE";
		GOTO QUIT;
	EXIT;
	
	QUIT:
	CLOSE INFILE;
	CLOSE OUTFILE REMOVE;
	DISPLAY "COMPILE FAILED";
END;
